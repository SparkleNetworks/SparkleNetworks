//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class InvitedPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._companyId != value)
                    {
                        if (this.Company != null && this.Company.ID != value)
                        {
                            this.Company = null;
                        }
                        this._companyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _companyId;
    
        public string Email
        {
            get;
            set;
        }
    
        public System.Guid Code
        {
            get;
            set;
        }
    
        public System.DateTime Date
        {
            get;
            set;
        }
    
        public bool Unregistred
        {
            get;
            set;
        }
    
        public int InvitedByUserId
        {
            get { return _invitedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._invitedByUserId != value)
                    {
                        if (this.Inviter != null && this.Inviter.Id != value)
                        {
                            this.Inviter = null;
                        }
                        this._invitedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _invitedByUserId;
    
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._userId != value)
                    {
                        if (this.User != null && this.User.Id != value)
                        {
                            this.User = null;
                        }
                        this._userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _userId;
    
        public Nullable<int> CompanyAccessLevel
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> DeletedDateUtc
        {
            get;
            set;
        }
    
        public Nullable<int> DeletedByUserId
        {
            get { return _deletedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._deletedByUserId != value)
                    {
                        if (this.DeletedByUser != null && this.DeletedByUser.Id != value)
                        {
                            this.DeletedByUser = null;
                        }
                        this._deletedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _deletedByUserId;

        #endregion

        #region Navigation Properties
    
        public virtual CompanyPoco Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private CompanyPoco _company;
    
        public virtual UserPoco Inviter
        {
            get { return _inviter; }
            set
            {
                if (!ReferenceEquals(_inviter, value))
                {
                    var previousValue = _inviter;
                    _inviter = value;
                    FixupInviter(previousValue);
                }
            }
        }
        private UserPoco _inviter;
    
        public virtual UserPoco User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private UserPoco _user;
    
        // RegisterRequest
        public ICollection<RegisterRequestPoco> RegisterRequests
        {
            get
            {
                if (_registerRequests == null)
                {
                    var newCollection = new FixupCollection<RegisterRequestPoco>();
                    newCollection.CollectionChanged += FixupRegisterRequests;
                    _registerRequests = newCollection;
                }
                return _registerRequests;
            }
            set
            {
                if (!ReferenceEquals(_registerRequests, value))
                {
                    var previousValue = _registerRequests as FixupCollection<RegisterRequestPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRegisterRequests;
                    }
                    _registerRequests = value;
                    var newValue = value as FixupCollection<RegisterRequestPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRegisterRequests;
                    }
                }
            }
        }
        private ICollection<RegisterRequestPoco> _registerRequests;
    
        public virtual UserPoco DeletedByUser
        {
            get { return _deletedByUser; }
            set
            {
                if (!ReferenceEquals(_deletedByUser, value))
                {
                    var previousValue = _deletedByUser;
                    _deletedByUser = value;
                    FixupDeletedByUser(previousValue);
                }
            }
        }
        private UserPoco _deletedByUser;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.Inviteds.Contains(this))
            {
                previousValue.Inviteds.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Inviteds.Contains(this))
                {
                    Company.Inviteds.Add(this);
                }
                if (CompanyId != Company.ID)
                {
                    CompanyId = Company.ID;
                }
            }
        }
    
        private void FixupInviter(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.UsersInvited.Contains(this))
            {
                previousValue.UsersInvited.Remove(this);
            }
    
            if (Inviter != null)
            {
                if (!Inviter.UsersInvited.Contains(this))
                {
                    Inviter.UsersInvited.Add(this);
                }
                if (InvitedByUserId != Inviter.Id)
                {
                    InvitedByUserId = Inviter.Id;
                }
            }
        }
    
        private void FixupUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.Invitations.Contains(this))
            {
                previousValue.Invitations.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Invitations.Contains(this))
                {
                    User.Invitations.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                UserId = null;
            }
        }
    
        private void FixupDeletedByUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.DeletedInvited.Contains(this))
            {
                previousValue.DeletedInvited.Remove(this);
            }
    
            if (DeletedByUser != null)
            {
                if (!DeletedByUser.DeletedInvited.Contains(this))
                {
                    DeletedByUser.DeletedInvited.Add(this);
                }
                if (DeletedByUserId != DeletedByUser.Id)
                {
                    DeletedByUserId = DeletedByUser.Id;
                }
            }
            else if (!_settingFK)
            {
                DeletedByUserId = null;
            }
        }
    
        private void FixupRegisterRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RegisterRequestPoco item in e.NewItems)
                {
                    item.AcceptedInvitation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RegisterRequestPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcceptedInvitation, this))
                    {
                        item.AcceptedInvitation = null;
                    }
                }
            }
        }

        #endregion

    }
}
