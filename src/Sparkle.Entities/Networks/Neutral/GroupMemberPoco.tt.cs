//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class GroupMemberPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._groupId != value)
                    {
                        if (this.Group != null && this.Group.Id != value)
                        {
                            this.Group = null;
                        }
                        this._groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _groupId;
    
        public short Accepted
        {
            get;
            set;
        }
    
        public Nullable<int> Notifications
        {
            get;
            set;
        }
    
        public Nullable<int> Rights
        {
            get;
            set;
        }
    
        public Nullable<byte> NotificationFrequency
        {
            get;
            set;
        }
    
        public int UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._userId != value)
                    {
                        if (this.User != null && this.User.Id != value)
                        {
                            this.User = null;
                        }
                        this._userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _userId;
    
        public Nullable<int> InvitedByUserId
        {
            get { return _invitedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._invitedByUserId != value)
                    {
                        if (this.InvitedBy != null && this.InvitedBy.Id != value)
                        {
                            this.InvitedBy = null;
                        }
                        this._invitedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _invitedByUserId;
    
        public Nullable<System.DateTime> DateAcceptedUtc
        {
            get;
            set;
        }
    
        public Nullable<int> AcceptedByUserId
        {
            get { return _acceptedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._acceptedByUserId != value)
                    {
                        if (this.AcceptedBy != null && this.AcceptedBy.Id != value)
                        {
                            this.AcceptedBy = null;
                        }
                        this._acceptedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _acceptedByUserId;
    
        public Nullable<System.DateTime> DateJoined
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> DateInvitedUtc
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual UserPoco User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private UserPoco _user;
    
        public virtual GroupPoco Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private GroupPoco _group;
    
        public virtual UserPoco AcceptedBy
        {
            get { return _acceptedBy; }
            set
            {
                if (!ReferenceEquals(_acceptedBy, value))
                {
                    var previousValue = _acceptedBy;
                    _acceptedBy = value;
                    FixupAcceptedBy(previousValue);
                }
            }
        }
        private UserPoco _acceptedBy;
    
        public virtual UserPoco InvitedBy
        {
            get { return _invitedBy; }
            set
            {
                if (!ReferenceEquals(_invitedBy, value))
                {
                    var previousValue = _invitedBy;
                    _invitedBy = value;
                    FixupInvitedBy(previousValue);
                }
            }
        }
        private UserPoco _invitedBy;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.GroupMembers.Contains(this))
            {
                previousValue.GroupMembers.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.GroupMembers.Contains(this))
                {
                    User.GroupMembers.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupGroup(GroupPoco previousValue)
        {
            if (previousValue != null && previousValue.Members.Contains(this))
            {
                previousValue.Members.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Members.Contains(this))
                {
                    Group.Members.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
        }
    
        private void FixupAcceptedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.GroupAcceptationsDone.Contains(this))
            {
                previousValue.GroupAcceptationsDone.Remove(this);
            }
    
            if (AcceptedBy != null)
            {
                if (!AcceptedBy.GroupAcceptationsDone.Contains(this))
                {
                    AcceptedBy.GroupAcceptationsDone.Add(this);
                }
                if (AcceptedByUserId != AcceptedBy.Id)
                {
                    AcceptedByUserId = AcceptedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                AcceptedByUserId = null;
            }
        }
    
        private void FixupInvitedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.GroupInvitationsSent.Contains(this))
            {
                previousValue.GroupInvitationsSent.Remove(this);
            }
    
            if (InvitedBy != null)
            {
                if (!InvitedBy.GroupInvitationsSent.Contains(this))
                {
                    InvitedBy.GroupInvitationsSent.Add(this);
                }
                if (InvitedByUserId != InvitedBy.Id)
                {
                    InvitedByUserId = InvitedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                InvitedByUserId = null;
            }
        }

        #endregion

    }
}
