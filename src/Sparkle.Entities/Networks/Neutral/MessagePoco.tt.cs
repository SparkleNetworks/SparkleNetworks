//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class MessagePoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public string Text
        {
            get;
            set;
        }
    
        public System.DateTime CreateDate
        {
            get;
            set;
        }
    
        public string Subject
        {
            get;
            set;
        }
    
        public Nullable<bool> Archived
        {
            get;
            set;
        }
    
        public bool Displayed
        {
            get;
            set;
        }
    
        public int FromUserId
        {
            get { return _fromUserId; }
            set
            {
                if (this._fromUserId != value)
                {
                    if (this.From != null && this.From.Id != value)
                    {
                        this.From = null;
                    }
                    this._fromUserId = value;
                }
            }
        }
        private int _fromUserId;
    
        public int ToUserId
        {
            get { return _toUserId; }
            set
            {
                if (this._toUserId != value)
                {
                    if (this.To != null && this.To.Id != value)
                    {
                        this.To = null;
                    }
                    this._toUserId = value;
                }
            }
        }
        private int _toUserId;
    
        public byte Source
        {
            get;
            set;
        }
    
        public Nullable<int> InboundEmailId
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual UserPoco From
        {
            get { return _from; }
            set
            {
                if (!ReferenceEquals(_from, value))
                {
                    var previousValue = _from;
                    _from = value;
                    FixupFrom(previousValue);
                }
            }
        }
        private UserPoco _from;
    
        public virtual UserPoco To
        {
            get { return _to; }
            set
            {
                if (!ReferenceEquals(_to, value))
                {
                    var previousValue = _to;
                    _to = value;
                    FixupTo(previousValue);
                }
            }
        }
        private UserPoco _to;

        #endregion

        #region Association Fixup
    
        private void FixupFrom(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.MessagesSent.Contains(this))
            {
                previousValue.MessagesSent.Remove(this);
            }
    
            if (From != null)
            {
                if (!From.MessagesSent.Contains(this))
                {
                    From.MessagesSent.Add(this);
                }
                if (FromUserId != From.Id)
                {
                    FromUserId = From.Id;
                }
            }
        }
    
        private void FixupTo(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.MessagesReceived.Contains(this))
            {
                previousValue.MessagesReceived.Remove(this);
            }
    
            if (To != null)
            {
                if (!To.MessagesReceived.Contains(this))
                {
                    To.MessagesReceived.Add(this);
                }
                if (ToUserId != To.Id)
                {
                    ToUserId = To.Id;
                }
            }
        }

        #endregion

    }
}
