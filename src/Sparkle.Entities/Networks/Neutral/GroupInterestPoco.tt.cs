//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class GroupInterestPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._groupId != value)
                    {
                        if (this.Group != null && this.Group.Id != value)
                        {
                            this.Group = null;
                        }
                        this._groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _groupId;
    
        public int InterestId
        {
            get { return _interestId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._interestId != value)
                    {
                        if (this.Interest != null && this.Interest.Id != value)
                        {
                            this.Interest = null;
                        }
                        this._interestId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _interestId;
    
        public System.DateTime DateCreatedUtc
        {
            get;
            set;
        }
    
        public int CreatedByUserId
        {
            get { return _createdByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._createdByUserId != value)
                    {
                        if (this.CreatedBy != null && this.CreatedBy.Id != value)
                        {
                            this.CreatedBy = null;
                        }
                        this._createdByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _createdByUserId;
    
        public Nullable<System.DateTime> DeletedDateUtc
        {
            get;
            set;
        }
    
        public Nullable<int> DeletedByUserId
        {
            get { return _deletedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._deletedByUserId != value)
                    {
                        if (this.DeletedBy != null && this.DeletedBy.Id != value)
                        {
                            this.DeletedBy = null;
                        }
                        this._deletedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _deletedByUserId;
    
        public Nullable<byte> DeleteReason
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual UserPoco CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private UserPoco _createdBy;
    
        public virtual UserPoco DeletedBy
        {
            get { return _deletedBy; }
            set
            {
                if (!ReferenceEquals(_deletedBy, value))
                {
                    var previousValue = _deletedBy;
                    _deletedBy = value;
                    FixupDeletedBy(previousValue);
                }
            }
        }
        private UserPoco _deletedBy;
    
        public virtual GroupPoco Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private GroupPoco _group;
    
        public virtual InterestPoco Interest
        {
            get { return _interest; }
            set
            {
                if (!ReferenceEquals(_interest, value))
                {
                    var previousValue = _interest;
                    _interest = value;
                    FixupInterest(previousValue);
                }
            }
        }
        private InterestPoco _interest;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCreatedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.GroupInterestsCreatedBy.Contains(this))
            {
                previousValue.GroupInterestsCreatedBy.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.GroupInterestsCreatedBy.Contains(this))
                {
                    CreatedBy.GroupInterestsCreatedBy.Add(this);
                }
                if (CreatedByUserId != CreatedBy.Id)
                {
                    CreatedByUserId = CreatedBy.Id;
                }
            }
        }
    
        private void FixupDeletedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.GroupInterestsDeletedBy.Contains(this))
            {
                previousValue.GroupInterestsDeletedBy.Remove(this);
            }
    
            if (DeletedBy != null)
            {
                if (!DeletedBy.GroupInterestsDeletedBy.Contains(this))
                {
                    DeletedBy.GroupInterestsDeletedBy.Add(this);
                }
                if (DeletedByUserId != DeletedBy.Id)
                {
                    DeletedByUserId = DeletedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                DeletedByUserId = null;
            }
        }
    
        private void FixupGroup(GroupPoco previousValue)
        {
            if (previousValue != null && previousValue.Interests.Contains(this))
            {
                previousValue.Interests.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Interests.Contains(this))
                {
                    Group.Interests.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
        }
    
        private void FixupInterest(InterestPoco previousValue)
        {
            if (previousValue != null && previousValue.Groups.Contains(this))
            {
                previousValue.Groups.Remove(this);
            }
    
            if (Interest != null)
            {
                if (!Interest.Groups.Contains(this))
                {
                    Interest.Groups.Add(this);
                }
                if (InterestId != Interest.Id)
                {
                    InterestId = Interest.Id;
                }
            }
        }

        #endregion

    }
}
