//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class ActivityPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int Type
        {
            get;
            set;
        }
    
        public string Message
        {
            get;
            set;
        }
    
        public Nullable<int> ProfileID
        {
            get;
            set;
        }
    
        public Nullable<int> CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._companyId != value)
                    {
                        if (this.Company != null && this.Company.ID != value)
                        {
                            this.Company = null;
                        }
                        this._companyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _companyId;
    
        public Nullable<int> GroupId
        {
            get;
            set;
        }
    
        public Nullable<int> EventId
        {
            get;
            set;
        }
    
        public System.DateTime Date
        {
            get;
            set;
        }
    
        public bool Displayed
        {
            get;
            set;
        }
    
        public int UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._userId != value)
                    {
                        if (this.User != null && this.User.Id != value)
                        {
                            this.User = null;
                        }
                        this._userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _userId;
    
        public Nullable<int> AdId
        {
            get { return _adId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._adId != value)
                    {
                        if (this.Ad != null && this.Ad.Id != value)
                        {
                            this.Ad = null;
                        }
                        this._adId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _adId;

        #endregion

        #region Navigation Properties
    
        public virtual CompanyPoco Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private CompanyPoco _company;
    
        public virtual UserPoco User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private UserPoco _user;
    
        public virtual AdPoco Ad
        {
            get { return _ad; }
            set
            {
                if (!ReferenceEquals(_ad, value))
                {
                    var previousValue = _ad;
                    _ad = value;
                    FixupAd(previousValue);
                }
            }
        }
        private AdPoco _ad;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.Activities.Contains(this))
            {
                previousValue.Activities.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Activities.Contains(this))
                {
                    Company.Activities.Add(this);
                }
                if (CompanyId != Company.ID)
                {
                    CompanyId = Company.ID;
                }
            }
            else if (!_settingFK)
            {
                CompanyId = null;
            }
        }
    
        private void FixupUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.Activities.Contains(this))
            {
                previousValue.Activities.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Activities.Contains(this))
                {
                    User.Activities.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupAd(AdPoco previousValue)
        {
            if (previousValue != null && previousValue.Activities.Contains(this))
            {
                previousValue.Activities.Remove(this);
            }
    
            if (Ad != null)
            {
                if (!Ad.Activities.Contains(this))
                {
                    Ad.Activities.Add(this);
                }
                if (AdId != Ad.Id)
                {
                    AdId = Ad.Id;
                }
            }
            else if (!_settingFK)
            {
                AdId = null;
            }
        }

        #endregion

    }
}
