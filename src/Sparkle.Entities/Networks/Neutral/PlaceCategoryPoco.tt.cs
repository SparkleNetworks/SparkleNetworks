//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class PlaceCategoryPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int ParentId
        {
            get;
            set;
        }
    
        public string Name
        {
            get;
            set;
        }
    
        public string Color
        {
            get;
            set;
        }
    
        public string Symbol
        {
            get;
            set;
        }
    
        public string FoursquareId
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> LastUpdateDateUtc
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        // Places
        public ICollection<PlacePoco> Places
        {
            get
            {
                if (_places == null)
                {
                    var newCollection = new FixupCollection<PlacePoco>();
                    newCollection.CollectionChanged += FixupPlaces;
                    _places = newCollection;
                }
                return _places;
            }
            set
            {
                if (!ReferenceEquals(_places, value))
                {
                    var previousValue = _places as FixupCollection<PlacePoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlaces;
                    }
                    _places = value;
                    var newValue = value as FixupCollection<PlacePoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlaces;
                    }
                }
            }
        }
        private ICollection<PlacePoco> _places;

        #endregion

        #region Association Fixup
    
        private void FixupPlaces(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PlacePoco item in e.NewItems)
                {
                    item.PlaceCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PlacePoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.PlaceCategory, this))
                    {
                        item.PlaceCategory = null;
                    }
                }
            }
        }

        #endregion

    }
}
