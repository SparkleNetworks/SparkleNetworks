//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class StatsCounterHitPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public System.DateTime DateUtc
        {
            get;
            set;
        }
    
        public int CounterId
        {
            get { return _counterId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._counterId != value)
                    {
                        if (this.Counter != null && this.Counter.Id != value)
                        {
                            this.Counter = null;
                        }
                        this._counterId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _counterId;
    
        public Nullable<int> NetworkId
        {
            get { return _networkId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._networkId != value)
                    {
                        if (this.Network != null && this.Network.Id != value)
                        {
                            this.Network = null;
                        }
                        this._networkId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _networkId;
    
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._userId != value)
                    {
                        if (this.User != null && this.User.Id != value)
                        {
                            this.User = null;
                        }
                        this._userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _userId;
    
        public string Identifier
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;
    
        public virtual StatsCounterPoco Counter
        {
            get { return _counter; }
            set
            {
                if (!ReferenceEquals(_counter, value))
                {
                    var previousValue = _counter;
                    _counter = value;
                    FixupCounter(previousValue);
                }
            }
        }
        private StatsCounterPoco _counter;
    
        public virtual UserPoco User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private UserPoco _user;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.StatsCounterHits.Contains(this))
            {
                previousValue.StatsCounterHits.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.StatsCounterHits.Contains(this))
                {
                    Network.StatsCounterHits.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
            else if (!_settingFK)
            {
                NetworkId = null;
            }
        }
    
        private void FixupCounter(StatsCounterPoco previousValue)
        {
            if (previousValue != null && previousValue.Hits.Contains(this))
            {
                previousValue.Hits.Remove(this);
            }
    
            if (Counter != null)
            {
                if (!Counter.Hits.Contains(this))
                {
                    Counter.Hits.Add(this);
                }
                if (CounterId != Counter.Id)
                {
                    CounterId = Counter.Id;
                }
            }
        }
    
        private void FixupUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.StatsCounterHits.Contains(this))
            {
                previousValue.StatsCounterHits.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.StatsCounterHits.Contains(this))
                {
                    User.StatsCounterHits.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                UserId = null;
            }
        }

        #endregion

    }
}
