//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class StatsCounterPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public string Category
        {
            get;
            set;
        }
    
        public string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        // StatsCounterHit
        public ICollection<StatsCounterHitPoco> Hits
        {
            get
            {
                if (_hits == null)
                {
                    var newCollection = new FixupCollection<StatsCounterHitPoco>();
                    newCollection.CollectionChanged += FixupHits;
                    _hits = newCollection;
                }
                return _hits;
            }
            set
            {
                if (!ReferenceEquals(_hits, value))
                {
                    var previousValue = _hits as FixupCollection<StatsCounterHitPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHits;
                    }
                    _hits = value;
                    var newValue = value as FixupCollection<StatsCounterHitPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHits;
                    }
                }
            }
        }
        private ICollection<StatsCounterHitPoco> _hits;

        #endregion

        #region Association Fixup
    
        private void FixupHits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StatsCounterHitPoco item in e.NewItems)
                {
                    item.Counter = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StatsCounterHitPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.Counter, this))
                    {
                        item.Counter = null;
                    }
                }
            }
        }

        #endregion

    }
}
