//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class TouchCommunicationPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int Type
        {
            get;
            set;
        }
    
        public System.DateTime Date
        {
            get;
            set;
        }
    
        public string BackgroundColor
        {
            get;
            set;
        }
    
        public string BackgroundUrl
        {
            get;
            set;
        }
    
        public int NetworkId
        {
            get { return _networkId; }
            set
            {
                if (this._networkId != value)
                {
                    if (this.Network != null && this.Network.Id != value)
                    {
                        this.Network = null;
                    }
                    this._networkId = value;
                }
            }
        }
        private int _networkId;

        #endregion

        #region Navigation Properties
    
        // TouchCommunicationItems
        public ICollection<TouchCommunicationItemPoco> Items
        {
            get
            {
                if (_items == null)
                {
                    var newCollection = new FixupCollection<TouchCommunicationItemPoco>();
                    newCollection.CollectionChanged += FixupItems;
                    _items = newCollection;
                }
                return _items;
            }
            set
            {
                if (!ReferenceEquals(_items, value))
                {
                    var previousValue = _items as FixupCollection<TouchCommunicationItemPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupItems;
                    }
                    _items = value;
                    var newValue = value as FixupCollection<TouchCommunicationItemPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupItems;
                    }
                }
            }
        }
        private ICollection<TouchCommunicationItemPoco> _items;
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;

        #endregion

        #region Association Fixup
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.TouchCommunications.Contains(this))
            {
                previousValue.TouchCommunications.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.TouchCommunications.Contains(this))
                {
                    Network.TouchCommunications.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
        }
    
        private void FixupItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TouchCommunicationItemPoco item in e.NewItems)
                {
                    item.TouchCommunication = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TouchCommunicationItemPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.TouchCommunication, this))
                    {
                        item.TouchCommunication = null;
                    }
                }
            }
        }

        #endregion

    }
}
