//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class CompanyRequestPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public string Name
        {
            get;
            set;
        }
    
        public string Alias
        {
            get;
            set;
        }
    
        public string Website
        {
            get;
            set;
        }
    
        public string Phone
        {
            get;
            set;
        }
    
        public string Email
        {
            get;
            set;
        }
    
        public string Building
        {
            get;
            set;
        }
    
        public Nullable<int> Floor
        {
            get;
            set;
        }
    
        public string Access
        {
            get;
            set;
        }
    
        public string Baseline
        {
            get;
            set;
        }
    
        public string About
        {
            get;
            set;
        }
    
        public string EmailDomain
        {
            get;
            set;
        }
    
        public short CategoryId
        {
            get { return _categoryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._categoryId != value)
                    {
                        if (this.CompanyCategory != null && this.CompanyCategory.Id != value)
                        {
                            this.CompanyCategory = null;
                        }
                        this._categoryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private short _categoryId;
    
        public short IndoorId
        {
            get;
            set;
        }
    
        public int NetworkId
        {
            get { return _networkId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._networkId != value)
                    {
                        if (this.Network != null && this.Network.Id != value)
                        {
                            this.Network = null;
                        }
                        this._networkId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _networkId;
    
        public string AdminEmails
        {
            get;
            set;
        }
    
        public string OtherEmails
        {
            get;
            set;
        }
    
        public System.Guid UniqueId
        {
            get;
            set;
        }
    
        public System.DateTime CreatedDateUtc
        {
            get;
            set;
        }
    
        public Nullable<int> CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._companyId != value)
                    {
                        if (this.Company != null && this.Company.ID != value)
                        {
                            this.Company = null;
                        }
                        this._companyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _companyId;
    
        public Nullable<bool> Approved
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> ClosedDateUtc
        {
            get;
            set;
        }
    
        public Nullable<int> ClosedByUserId
        {
            get { return _closedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._closedByUserId != value)
                    {
                        if (this.ClosedByUser != null && this.ClosedByUser.Id != value)
                        {
                            this.ClosedByUser = null;
                        }
                        this._closedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _closedByUserId;
    
        public Nullable<System.DateTime> BlockedDateUtc
        {
            get;
            set;
        }
    
        public Nullable<int> BlockedByUserId
        {
            get { return _blockedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._blockedByUserId != value)
                    {
                        if (this.BlockedByUser != null && this.BlockedByUser.Id != value)
                        {
                            this.BlockedByUser = null;
                        }
                        this._blockedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _blockedByUserId;
    
        public string BlockedReason
        {
            get;
            set;
        }
    
        public string ApprovedReason
        {
            get;
            set;
        }
    
        public short RejectedTimes
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual CompanyPoco Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private CompanyPoco _company;
    
        // CompanyRequestMessage
        public ICollection<CompanyRequestMessagePoco> Messages
        {
            get
            {
                if (_messages == null)
                {
                    var newCollection = new FixupCollection<CompanyRequestMessagePoco>();
                    newCollection.CollectionChanged += FixupMessages;
                    _messages = newCollection;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    var previousValue = _messages as FixupCollection<CompanyRequestMessagePoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    var newValue = value as FixupCollection<CompanyRequestMessagePoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessages;
                    }
                }
            }
        }
        private ICollection<CompanyRequestMessagePoco> _messages;
    
        public virtual UserPoco ClosedByUser
        {
            get { return _closedByUser; }
            set
            {
                if (!ReferenceEquals(_closedByUser, value))
                {
                    var previousValue = _closedByUser;
                    _closedByUser = value;
                    FixupClosedByUser(previousValue);
                }
            }
        }
        private UserPoco _closedByUser;
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;
    
        public virtual UserPoco BlockedByUser
        {
            get { return _blockedByUser; }
            set
            {
                if (!ReferenceEquals(_blockedByUser, value))
                {
                    var previousValue = _blockedByUser;
                    _blockedByUser = value;
                    FixupBlockedByUser(previousValue);
                }
            }
        }
        private UserPoco _blockedByUser;
    
        public virtual CompanyCategoryPoco CompanyCategory
        {
            get { return _companyCategory; }
            set
            {
                if (!ReferenceEquals(_companyCategory, value))
                {
                    var previousValue = _companyCategory;
                    _companyCategory = value;
                    FixupCompanyCategory(previousValue);
                }
            }
        }
        private CompanyCategoryPoco _companyCategory;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyRequests.Contains(this))
            {
                previousValue.CompanyRequests.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.CompanyRequests.Contains(this))
                {
                    Company.CompanyRequests.Add(this);
                }
                if (CompanyId != Company.ID)
                {
                    CompanyId = Company.ID;
                }
            }
            else if (!_settingFK)
            {
                CompanyId = null;
            }
        }
    
        private void FixupClosedByUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.ApprovedCompanyRequests.Contains(this))
            {
                previousValue.ApprovedCompanyRequests.Remove(this);
            }
    
            if (ClosedByUser != null)
            {
                if (!ClosedByUser.ApprovedCompanyRequests.Contains(this))
                {
                    ClosedByUser.ApprovedCompanyRequests.Add(this);
                }
                if (ClosedByUserId != ClosedByUser.Id)
                {
                    ClosedByUserId = ClosedByUser.Id;
                }
            }
            else if (!_settingFK)
            {
                ClosedByUserId = null;
            }
        }
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyRequests.Contains(this))
            {
                previousValue.CompanyRequests.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.CompanyRequests.Contains(this))
                {
                    Network.CompanyRequests.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
        }
    
        private void FixupBlockedByUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.BlockedCompanyRequests.Contains(this))
            {
                previousValue.BlockedCompanyRequests.Remove(this);
            }
    
            if (BlockedByUser != null)
            {
                if (!BlockedByUser.BlockedCompanyRequests.Contains(this))
                {
                    BlockedByUser.BlockedCompanyRequests.Add(this);
                }
                if (BlockedByUserId != BlockedByUser.Id)
                {
                    BlockedByUserId = BlockedByUser.Id;
                }
            }
            else if (!_settingFK)
            {
                BlockedByUserId = null;
            }
        }
    
        private void FixupCompanyCategory(CompanyCategoryPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyRequests.Contains(this))
            {
                previousValue.CompanyRequests.Remove(this);
            }
    
            if (CompanyCategory != null)
            {
                if (!CompanyCategory.CompanyRequests.Contains(this))
                {
                    CompanyCategory.CompanyRequests.Add(this);
                }
                if (CategoryId != CompanyCategory.Id)
                {
                    CategoryId = CompanyCategory.Id;
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CompanyRequestMessagePoco item in e.NewItems)
                {
                    item.CompanyRequest = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CompanyRequestMessagePoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.CompanyRequest, this))
                    {
                        item.CompanyRequest = null;
                    }
                }
            }
        }

        #endregion

    }
}
