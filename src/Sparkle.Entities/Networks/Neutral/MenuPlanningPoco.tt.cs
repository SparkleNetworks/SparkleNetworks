//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class MenuPlanningPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public System.DateTime Date
        {
            get;
            set;
        }
    
        public int CompanyId
        {
            get;
            set;
        }
    
        public int MenuId
        {
            get { return _menuId; }
            set
            {
                if (this._menuId != value)
                {
                    if (this.Menu != null && this.Menu.Id != value)
                    {
                        this.Menu = null;
                    }
                    this._menuId = value;
                }
            }
        }
        private int _menuId;
    
        public int PlaceId
        {
            get;
            set;
        }
    
        public string Text
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual MenuPoco Menu
        {
            get { return _menu; }
            set
            {
                if (!ReferenceEquals(_menu, value))
                {
                    var previousValue = _menu;
                    _menu = value;
                    FixupMenu(previousValue);
                }
            }
        }
        private MenuPoco _menu;

        #endregion

        #region Association Fixup
    
        private void FixupMenu(MenuPoco previousValue)
        {
            if (previousValue != null && previousValue.MenuPlannings.Contains(this))
            {
                previousValue.MenuPlannings.Remove(this);
            }
    
            if (Menu != null)
            {
                if (!Menu.MenuPlannings.Contains(this))
                {
                    Menu.MenuPlannings.Add(this);
                }
                if (MenuId != Menu.Id)
                {
                    MenuId = Menu.Id;
                }
            }
        }

        #endregion

    }
}
