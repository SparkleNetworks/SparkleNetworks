//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class PollChoicePoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int PollId
        {
            get { return _pollId; }
            set
            {
                if (this._pollId != value)
                {
                    if (this.Poll != null && this.Poll.Id != value)
                    {
                        this.Poll = null;
                    }
                    this._pollId = value;
                }
            }
        }
        private int _pollId;
    
        public string Choice
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        // PollAnswers
        public ICollection<PollAnswerPoco> PollAnswers
        {
            get
            {
                if (_pollAnswers == null)
                {
                    var newCollection = new FixupCollection<PollAnswerPoco>();
                    newCollection.CollectionChanged += FixupPollAnswers;
                    _pollAnswers = newCollection;
                }
                return _pollAnswers;
            }
            set
            {
                if (!ReferenceEquals(_pollAnswers, value))
                {
                    var previousValue = _pollAnswers as FixupCollection<PollAnswerPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPollAnswers;
                    }
                    _pollAnswers = value;
                    var newValue = value as FixupCollection<PollAnswerPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPollAnswers;
                    }
                }
            }
        }
        private ICollection<PollAnswerPoco> _pollAnswers;
    
        public virtual PollPoco Poll
        {
            get { return _poll; }
            set
            {
                if (!ReferenceEquals(_poll, value))
                {
                    var previousValue = _poll;
                    _poll = value;
                    FixupPoll(previousValue);
                }
            }
        }
        private PollPoco _poll;

        #endregion

        #region Association Fixup
    
        private void FixupPoll(PollPoco previousValue)
        {
            if (previousValue != null && previousValue.PollChoices.Contains(this))
            {
                previousValue.PollChoices.Remove(this);
            }
    
            if (Poll != null)
            {
                if (!Poll.PollChoices.Contains(this))
                {
                    Poll.PollChoices.Add(this);
                }
                if (PollId != Poll.Id)
                {
                    PollId = Poll.Id;
                }
            }
        }
    
        private void FixupPollAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PollAnswerPoco item in e.NewItems)
                {
                    item.PollChoice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PollAnswerPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.PollChoice, this))
                    {
                        item.PollChoice = null;
                    }
                }
            }
        }

        #endregion

    }
}
