//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class RegisterRequestPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public string EmailDomain
        {
            get;
            set;
        }
    
        public string CompanyName
        {
            get;
            set;
        }
    
        public System.DateTime DateCreatedUtc
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> DateUpdatedUtc
        {
            get;
            set;
        }
    
        public short Status
        {
            get;
            set;
        }
    
        public Nullable<int> ReplyUserId
        {
            get { return _replyUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._replyUserId != value)
                    {
                        if (this.RepliedBy != null && this.RepliedBy.Id != value)
                        {
                            this.RepliedBy = null;
                        }
                        this._replyUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _replyUserId;
    
        public Nullable<int> ValidatedByUserId
        {
            get { return _validatedByUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._validatedByUserId != value)
                    {
                        if (this.ValidatedBy != null && this.ValidatedBy.Id != value)
                        {
                            this.ValidatedBy = null;
                        }
                        this._validatedByUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _validatedByUserId;
    
        public int NetworkId
        {
            get { return _networkId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._networkId != value)
                    {
                        if (this.Network != null && this.Network.Id != value)
                        {
                            this.Network = null;
                        }
                        this._networkId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _networkId;
    
        public string EmailAccountPart
        {
            get;
            set;
        }
    
        public string EmailTagPart
        {
            get;
            set;
        }
    
        public Nullable<int> CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._companyId != value)
                    {
                        if (this.Company != null && this.Company.ID != value)
                        {
                            this.Company = null;
                        }
                        this._companyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _companyId;
    
        public Nullable<System.Guid> Code
        {
            get;
            set;
        }
    
        public Nullable<int> AcceptedInvitationId
        {
            get { return _acceptedInvitationId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._acceptedInvitationId != value)
                    {
                        if (this.AcceptedInvitation != null && this.AcceptedInvitation.Id != value)
                        {
                            this.AcceptedInvitation = null;
                        }
                        this._acceptedInvitationId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _acceptedInvitationId;

        #endregion

        #region Navigation Properties
    
        public virtual UserPoco RepliedBy
        {
            get { return _repliedBy; }
            set
            {
                if (!ReferenceEquals(_repliedBy, value))
                {
                    var previousValue = _repliedBy;
                    _repliedBy = value;
                    FixupRepliedBy(previousValue);
                }
            }
        }
        private UserPoco _repliedBy;
    
        public virtual UserPoco ValidatedBy
        {
            get { return _validatedBy; }
            set
            {
                if (!ReferenceEquals(_validatedBy, value))
                {
                    var previousValue = _validatedBy;
                    _validatedBy = value;
                    FixupValidatedBy(previousValue);
                }
            }
        }
        private UserPoco _validatedBy;
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;
    
        public virtual CompanyPoco Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private CompanyPoco _company;
    
        public virtual InvitedPoco AcceptedInvitation
        {
            get { return _acceptedInvitation; }
            set
            {
                if (!ReferenceEquals(_acceptedInvitation, value))
                {
                    var previousValue = _acceptedInvitation;
                    _acceptedInvitation = value;
                    FixupAcceptedInvitation(previousValue);
                }
            }
        }
        private InvitedPoco _acceptedInvitation;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupRepliedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.RepliedToRegisterRequests.Contains(this))
            {
                previousValue.RepliedToRegisterRequests.Remove(this);
            }
    
            if (RepliedBy != null)
            {
                if (!RepliedBy.RepliedToRegisterRequests.Contains(this))
                {
                    RepliedBy.RepliedToRegisterRequests.Add(this);
                }
                if (ReplyUserId != RepliedBy.Id)
                {
                    ReplyUserId = RepliedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                ReplyUserId = null;
            }
        }
    
        private void FixupValidatedBy(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.ValidatedRegisterRequests.Contains(this))
            {
                previousValue.ValidatedRegisterRequests.Remove(this);
            }
    
            if (ValidatedBy != null)
            {
                if (!ValidatedBy.ValidatedRegisterRequests.Contains(this))
                {
                    ValidatedBy.ValidatedRegisterRequests.Add(this);
                }
                if (ValidatedByUserId != ValidatedBy.Id)
                {
                    ValidatedByUserId = ValidatedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                ValidatedByUserId = null;
            }
        }
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.RegisterRequests.Contains(this))
            {
                previousValue.RegisterRequests.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.RegisterRequests.Contains(this))
                {
                    Network.RegisterRequests.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
        }
    
        private void FixupCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.RegisterRequests.Contains(this))
            {
                previousValue.RegisterRequests.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.RegisterRequests.Contains(this))
                {
                    Company.RegisterRequests.Add(this);
                }
                if (CompanyId != Company.ID)
                {
                    CompanyId = Company.ID;
                }
            }
            else if (!_settingFK)
            {
                CompanyId = null;
            }
        }
    
        private void FixupAcceptedInvitation(InvitedPoco previousValue)
        {
            if (previousValue != null && previousValue.RegisterRequests.Contains(this))
            {
                previousValue.RegisterRequests.Remove(this);
            }
    
            if (AcceptedInvitation != null)
            {
                if (!AcceptedInvitation.RegisterRequests.Contains(this))
                {
                    AcceptedInvitation.RegisterRequests.Add(this);
                }
                if (AcceptedInvitationId != AcceptedInvitation.Id)
                {
                    AcceptedInvitationId = AcceptedInvitation.Id;
                }
            }
            else if (!_settingFK)
            {
                AcceptedInvitationId = null;
            }
        }

        #endregion

    }
}
