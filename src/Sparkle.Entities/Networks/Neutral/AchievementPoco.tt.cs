//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class AchievementPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int ThemeId
        {
            get;
            set;
        }
    
        public int FamilyId
        {
            get;
            set;
        }
    
        public string Title
        {
            get;
            set;
        }
    
        public string Description
        {
            get;
            set;
        }
    
        public byte Level
        {
            get;
            set;
        }
    
        public int Target
        {
            get;
            set;
        }
    
        public int Points
        {
            get;
            set;
        }
    
        public string Key
        {
            get;
            set;
        }
    
        public Nullable<int> NetworkId
        {
            get { return _networkId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._networkId != value)
                    {
                        if (this.Network != null && this.Network.Id != value)
                        {
                            this.Network = null;
                        }
                        this._networkId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _networkId;

        #endregion

        #region Navigation Properties
    
        // AchievementsCompany
        public ICollection<AchievementsCompanyPoco> Companies
        {
            get
            {
                if (_companies == null)
                {
                    var newCollection = new FixupCollection<AchievementsCompanyPoco>();
                    newCollection.CollectionChanged += FixupCompanies;
                    _companies = newCollection;
                }
                return _companies;
            }
            set
            {
                if (!ReferenceEquals(_companies, value))
                {
                    var previousValue = _companies as FixupCollection<AchievementsCompanyPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCompanies;
                    }
                    _companies = value;
                    var newValue = value as FixupCollection<AchievementsCompanyPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCompanies;
                    }
                }
            }
        }
        private ICollection<AchievementsCompanyPoco> _companies;
    
        // AchievementsUser
        public ICollection<AchievementsUserPoco> AchievementsUsers
        {
            get
            {
                if (_achievementsUsers == null)
                {
                    var newCollection = new FixupCollection<AchievementsUserPoco>();
                    newCollection.CollectionChanged += FixupAchievementsUsers;
                    _achievementsUsers = newCollection;
                }
                return _achievementsUsers;
            }
            set
            {
                if (!ReferenceEquals(_achievementsUsers, value))
                {
                    var previousValue = _achievementsUsers as FixupCollection<AchievementsUserPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAchievementsUsers;
                    }
                    _achievementsUsers = value;
                    var newValue = value as FixupCollection<AchievementsUserPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAchievementsUsers;
                    }
                }
            }
        }
        private ICollection<AchievementsUserPoco> _achievementsUsers;
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.Achievements.Contains(this))
            {
                previousValue.Achievements.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.Achievements.Contains(this))
                {
                    Network.Achievements.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
            else if (!_settingFK)
            {
                NetworkId = null;
            }
        }
    
        private void FixupCompanies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AchievementsCompanyPoco item in e.NewItems)
                {
                    item.Achievement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AchievementsCompanyPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.Achievement, this))
                    {
                        item.Achievement = null;
                    }
                }
            }
        }
    
        private void FixupAchievementsUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AchievementsUserPoco item in e.NewItems)
                {
                    item.Achievement = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AchievementsUserPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.Achievement, this))
                    {
                        item.Achievement = null;
                    }
                }
            }
        }

        #endregion

    }
}
