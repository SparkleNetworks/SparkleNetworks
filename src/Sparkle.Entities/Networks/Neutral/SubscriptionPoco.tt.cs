//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class SubscriptionPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int TemplateId
        {
            get { return _templateId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._templateId != value)
                    {
                        if (this.Template != null && this.Template.Id != value)
                        {
                            this.Template = null;
                        }
                        this._templateId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _templateId;
    
        public System.DateTime DateCreatedUtc
        {
            get;
            set;
        }
    
        public Nullable<int> OwnerUserId
        {
            get { return _ownerUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._ownerUserId != value)
                    {
                        if (this.OwnerUser != null && this.OwnerUser.Id != value)
                        {
                            this.OwnerUser = null;
                        }
                        this._ownerUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _ownerUserId;
    
        public Nullable<int> OwnerCompanyId
        {
            get { return _ownerCompanyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._ownerCompanyId != value)
                    {
                        if (this.OwnerCompany != null && this.OwnerCompany.ID != value)
                        {
                            this.OwnerCompany = null;
                        }
                        this._ownerCompanyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _ownerCompanyId;
    
        public Nullable<int> AppliesToUserId
        {
            get { return _appliesToUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._appliesToUserId != value)
                    {
                        if (this.AppliesToUser != null && this.AppliesToUser.Id != value)
                        {
                            this.AppliesToUser = null;
                        }
                        this._appliesToUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _appliesToUserId;
    
        public Nullable<int> AppliesToCompanyId
        {
            get { return _appliesToCompanyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._appliesToCompanyId != value)
                    {
                        if (this.AppliesToCompany != null && this.AppliesToCompany.ID != value)
                        {
                            this.AppliesToCompany = null;
                        }
                        this._appliesToCompanyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _appliesToCompanyId;
    
        public Nullable<System.DateTime> DateBeginUtc
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> DateEndUtc
        {
            get;
            set;
        }
    
        public bool AutoRenew
        {
            get;
            set;
        }
    
        public int DurationValue
        {
            get;
            set;
        }
    
        public byte DurationKind
        {
            get;
            set;
        }
    
        public Nullable<decimal> PriceUsdWithoutVat
        {
            get;
            set;
        }
    
        public Nullable<decimal> PriceUsdWithVat
        {
            get;
            set;
        }
    
        public Nullable<decimal> PriceEurWithoutVat
        {
            get;
            set;
        }
    
        public Nullable<decimal> PriceEurWithVat
        {
            get;
            set;
        }
    
        public string Name
        {
            get;
            set;
        }
    
        public bool IsForAllCompanyUsers
        {
            get;
            set;
        }
    
        public int NetworkId
        {
            get { return _networkId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._networkId != value)
                    {
                        if (this.Network != null && this.Network.Id != value)
                        {
                            this.Network = null;
                        }
                        this._networkId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _networkId;
    
        public bool IsPaid
        {
            get;
            set;
        }
    
        public byte PaymentMethod
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual CompanyPoco AppliesToCompany
        {
            get { return _appliesToCompany; }
            set
            {
                if (!ReferenceEquals(_appliesToCompany, value))
                {
                    var previousValue = _appliesToCompany;
                    _appliesToCompany = value;
                    FixupAppliesToCompany(previousValue);
                }
            }
        }
        private CompanyPoco _appliesToCompany;
    
        public virtual CompanyPoco OwnerCompany
        {
            get { return _ownerCompany; }
            set
            {
                if (!ReferenceEquals(_ownerCompany, value))
                {
                    var previousValue = _ownerCompany;
                    _ownerCompany = value;
                    FixupOwnerCompany(previousValue);
                }
            }
        }
        private CompanyPoco _ownerCompany;
    
        public virtual UserPoco AppliesToUser
        {
            get { return _appliesToUser; }
            set
            {
                if (!ReferenceEquals(_appliesToUser, value))
                {
                    var previousValue = _appliesToUser;
                    _appliesToUser = value;
                    FixupAppliesToUser(previousValue);
                }
            }
        }
        private UserPoco _appliesToUser;
    
        public virtual UserPoco OwnerUser
        {
            get { return _ownerUser; }
            set
            {
                if (!ReferenceEquals(_ownerUser, value))
                {
                    var previousValue = _ownerUser;
                    _ownerUser = value;
                    FixupOwnerUser(previousValue);
                }
            }
        }
        private UserPoco _ownerUser;
    
        public virtual SubscriptionTemplatePoco Template
        {
            get { return _template; }
            set
            {
                if (!ReferenceEquals(_template, value))
                {
                    var previousValue = _template;
                    _template = value;
                    FixupTemplate(previousValue);
                }
            }
        }
        private SubscriptionTemplatePoco _template;
    
        public virtual NetworkPoco Network
        {
            get { return _network; }
            set
            {
                if (!ReferenceEquals(_network, value))
                {
                    var previousValue = _network;
                    _network = value;
                    FixupNetwork(previousValue);
                }
            }
        }
        private NetworkPoco _network;
    
        // StripeTransaction
        public ICollection<StripeTransactionPoco> StripeTransactions
        {
            get
            {
                if (_stripeTransactions == null)
                {
                    var newCollection = new FixupCollection<StripeTransactionPoco>();
                    newCollection.CollectionChanged += FixupStripeTransactions;
                    _stripeTransactions = newCollection;
                }
                return _stripeTransactions;
            }
            set
            {
                if (!ReferenceEquals(_stripeTransactions, value))
                {
                    var previousValue = _stripeTransactions as FixupCollection<StripeTransactionPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStripeTransactions;
                    }
                    _stripeTransactions = value;
                    var newValue = value as FixupCollection<StripeTransactionPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStripeTransactions;
                    }
                }
            }
        }
        private ICollection<StripeTransactionPoco> _stripeTransactions;
    
        // SubscriptionNotification
        public ICollection<SubscriptionNotificationPoco> SubscriptionNotifications
        {
            get
            {
                if (_subscriptionNotifications == null)
                {
                    var newCollection = new FixupCollection<SubscriptionNotificationPoco>();
                    newCollection.CollectionChanged += FixupSubscriptionNotifications;
                    _subscriptionNotifications = newCollection;
                }
                return _subscriptionNotifications;
            }
            set
            {
                if (!ReferenceEquals(_subscriptionNotifications, value))
                {
                    var previousValue = _subscriptionNotifications as FixupCollection<SubscriptionNotificationPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptionNotifications;
                    }
                    _subscriptionNotifications = value;
                    var newValue = value as FixupCollection<SubscriptionNotificationPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptionNotifications;
                    }
                }
            }
        }
        private ICollection<SubscriptionNotificationPoco> _subscriptionNotifications;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAppliesToCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.ApplyingSubscriptions.Contains(this))
            {
                previousValue.ApplyingSubscriptions.Remove(this);
            }
    
            if (AppliesToCompany != null)
            {
                if (!AppliesToCompany.ApplyingSubscriptions.Contains(this))
                {
                    AppliesToCompany.ApplyingSubscriptions.Add(this);
                }
                if (AppliesToCompanyId != AppliesToCompany.ID)
                {
                    AppliesToCompanyId = AppliesToCompany.ID;
                }
            }
            else if (!_settingFK)
            {
                AppliesToCompanyId = null;
            }
        }
    
        private void FixupOwnerCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.OwnedSubscriptions.Contains(this))
            {
                previousValue.OwnedSubscriptions.Remove(this);
            }
    
            if (OwnerCompany != null)
            {
                if (!OwnerCompany.OwnedSubscriptions.Contains(this))
                {
                    OwnerCompany.OwnedSubscriptions.Add(this);
                }
                if (OwnerCompanyId != OwnerCompany.ID)
                {
                    OwnerCompanyId = OwnerCompany.ID;
                }
            }
            else if (!_settingFK)
            {
                OwnerCompanyId = null;
            }
        }
    
        private void FixupAppliesToUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.ApplyingSubscriptions.Contains(this))
            {
                previousValue.ApplyingSubscriptions.Remove(this);
            }
    
            if (AppliesToUser != null)
            {
                if (!AppliesToUser.ApplyingSubscriptions.Contains(this))
                {
                    AppliesToUser.ApplyingSubscriptions.Add(this);
                }
                if (AppliesToUserId != AppliesToUser.Id)
                {
                    AppliesToUserId = AppliesToUser.Id;
                }
            }
            else if (!_settingFK)
            {
                AppliesToUserId = null;
            }
        }
    
        private void FixupOwnerUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.OwnedSubscriptions.Contains(this))
            {
                previousValue.OwnedSubscriptions.Remove(this);
            }
    
            if (OwnerUser != null)
            {
                if (!OwnerUser.OwnedSubscriptions.Contains(this))
                {
                    OwnerUser.OwnedSubscriptions.Add(this);
                }
                if (OwnerUserId != OwnerUser.Id)
                {
                    OwnerUserId = OwnerUser.Id;
                }
            }
            else if (!_settingFK)
            {
                OwnerUserId = null;
            }
        }
    
        private void FixupTemplate(SubscriptionTemplatePoco previousValue)
        {
            if (previousValue != null && previousValue.Subscriptions.Contains(this))
            {
                previousValue.Subscriptions.Remove(this);
            }
    
            if (Template != null)
            {
                if (!Template.Subscriptions.Contains(this))
                {
                    Template.Subscriptions.Add(this);
                }
                if (TemplateId != Template.Id)
                {
                    TemplateId = Template.Id;
                }
            }
        }
    
        private void FixupNetwork(NetworkPoco previousValue)
        {
            if (previousValue != null && previousValue.Subscriptions.Contains(this))
            {
                previousValue.Subscriptions.Remove(this);
            }
    
            if (Network != null)
            {
                if (!Network.Subscriptions.Contains(this))
                {
                    Network.Subscriptions.Add(this);
                }
                if (NetworkId != Network.Id)
                {
                    NetworkId = Network.Id;
                }
            }
        }
    
        private void FixupStripeTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StripeTransactionPoco item in e.NewItems)
                {
                    if (!item.Subscriptions.Contains(this))
                    {
                        item.Subscriptions.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StripeTransactionPoco item in e.OldItems)
                {
                    if (item.Subscriptions.Contains(this))
                    {
                        item.Subscriptions.Remove(this);
                    }
                }
            }
        }
    
        private void FixupSubscriptionNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubscriptionNotificationPoco item in e.NewItems)
                {
                    item.Subscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubscriptionNotificationPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subscription, this))
                    {
                        item.Subscription = null;
                    }
                }
            }
        }

        #endregion

    }
}
