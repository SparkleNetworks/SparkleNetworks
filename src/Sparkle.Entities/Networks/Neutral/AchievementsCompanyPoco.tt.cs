//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class AchievementsCompanyPoco
    {
        #region Primitive Properties
    
        public int AchievementId
        {
            get { return _achievementId; }
            set
            {
                if (this._achievementId != value)
                {
                    if (this.Achievement != null && this.Achievement.Id != value)
                    {
                        this.Achievement = null;
                    }
                    this._achievementId = value;
                }
            }
        }
        private int _achievementId;
    
        public int CompanyId
        {
            get { return _companyId; }
            set
            {
                if (this._companyId != value)
                {
                    if (this.Company != null && this.Company.ID != value)
                    {
                        this.Company = null;
                    }
                    this._companyId = value;
                }
            }
        }
        private int _companyId;
    
        public System.DateTime DateEarned
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual AchievementPoco Achievement
        {
            get { return _achievement; }
            set
            {
                if (!ReferenceEquals(_achievement, value))
                {
                    var previousValue = _achievement;
                    _achievement = value;
                    FixupAchievement(previousValue);
                }
            }
        }
        private AchievementPoco _achievement;
    
        public virtual CompanyPoco Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private CompanyPoco _company;

        #endregion

        #region Association Fixup
    
        private void FixupAchievement(AchievementPoco previousValue)
        {
            if (previousValue != null && previousValue.Companies.Contains(this))
            {
                previousValue.Companies.Remove(this);
            }
    
            if (Achievement != null)
            {
                if (!Achievement.Companies.Contains(this))
                {
                    Achievement.Companies.Add(this);
                }
                if (AchievementId != Achievement.Id)
                {
                    AchievementId = Achievement.Id;
                }
            }
        }
    
        private void FixupCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.AchievementsCompanies.Contains(this))
            {
                previousValue.AchievementsCompanies.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.AchievementsCompanies.Contains(this))
                {
                    Company.AchievementsCompanies.Add(this);
                }
                if (CompanyId != Company.ID)
                {
                    CompanyId = Company.ID;
                }
            }
        }

        #endregion

    }
}
