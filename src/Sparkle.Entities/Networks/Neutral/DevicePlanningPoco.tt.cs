//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class DevicePlanningPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int DeviceId
        {
            get { return _deviceId; }
            set
            {
                if (this._deviceId != value)
                {
                    if (this.Device != null && this.Device.Id != value)
                    {
                        this.Device = null;
                    }
                    this._deviceId = value;
                }
            }
        }
        private int _deviceId;
    
        public string LayoutType
        {
            get;
            set;
        }
    
        public string LayoutData
        {
            get;
            set;
        }
    
        public System.DateTime DateStartUtc
        {
            get;
            set;
        }
    
        public System.DateTime DateEndUtc
        {
            get;
            set;
        }
    
        public System.DateTime DateUpdatedUtc
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual DevicePoco Device
        {
            get { return _device; }
            set
            {
                if (!ReferenceEquals(_device, value))
                {
                    var previousValue = _device;
                    _device = value;
                    FixupDevice(previousValue);
                }
            }
        }
        private DevicePoco _device;

        #endregion

        #region Association Fixup
    
        private void FixupDevice(DevicePoco previousValue)
        {
            if (previousValue != null && previousValue.DevicePlannings.Contains(this))
            {
                previousValue.DevicePlannings.Remove(this);
            }
    
            if (Device != null)
            {
                if (!Device.DevicePlannings.Contains(this))
                {
                    Device.DevicePlannings.Add(this);
                }
                if (DeviceId != Device.Id)
                {
                    DeviceId = Device.Id;
                }
            }
        }

        #endregion

    }
}
