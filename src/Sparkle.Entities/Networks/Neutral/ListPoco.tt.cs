//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class ListPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int OwnerType
        {
            get;
            set;
        }
    
        public int OwnerValue
        {
            get;
            set;
        }
    
        public bool Focus
        {
            get;
            set;
        }
    
        public int CreatedByUserId
        {
            get { return _createdByUserId; }
            set
            {
                if (this._createdByUserId != value)
                {
                    if (this.User != null && this.User.Id != value)
                    {
                        this.User = null;
                    }
                    this._createdByUserId = value;
                }
            }
        }
        private int _createdByUserId;

        #endregion

        #region Navigation Properties
    
        // ListItems
        public ICollection<ListItemPoco> ListItems
        {
            get
            {
                if (_listItems == null)
                {
                    var newCollection = new FixupCollection<ListItemPoco>();
                    newCollection.CollectionChanged += FixupListItems;
                    _listItems = newCollection;
                }
                return _listItems;
            }
            set
            {
                if (!ReferenceEquals(_listItems, value))
                {
                    var previousValue = _listItems as FixupCollection<ListItemPoco>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupListItems;
                    }
                    _listItems = value;
                    var newValue = value as FixupCollection<ListItemPoco>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupListItems;
                    }
                }
            }
        }
        private ICollection<ListItemPoco> _listItems;
    
        public virtual UserPoco User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private UserPoco _user;

        #endregion

        #region Association Fixup
    
        private void FixupUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.Lists.Contains(this))
            {
                previousValue.Lists.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Lists.Contains(this))
                {
                    User.Lists.Add(this);
                }
                if (CreatedByUserId != User.Id)
                {
                    CreatedByUserId = User.Id;
                }
            }
        }
    
        private void FixupListItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ListItemPoco item in e.NewItems)
                {
                    item.List = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ListItemPoco item in e.OldItems)
                {
                    if (ReferenceEquals(item.List, this))
                    {
                        item.List = null;
                    }
                }
            }
        }

        #endregion

    }
}
