//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class SeekFriendPoco
    {
        #region Primitive Properties
    
        public Nullable<bool> HasAccepted
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> ExpirationDate
        {
            get;
            set;
        }
    
        public Nullable<System.DateTime> CreateDate
        {
            get;
            set;
        }
    
        public int SeekerId
        {
            get { return _seekerId; }
            set
            {
                if (this._seekerId != value)
                {
                    if (this.Seeker != null && this.Seeker.Id != value)
                    {
                        this.Seeker = null;
                    }
                    this._seekerId = value;
                }
            }
        }
        private int _seekerId;
    
        public int TargetId
        {
            get { return _targetId; }
            set
            {
                if (this._targetId != value)
                {
                    if (this.Target != null && this.Target.Id != value)
                    {
                        this.Target = null;
                    }
                    this._targetId = value;
                }
            }
        }
        private int _targetId;

        #endregion

        #region Navigation Properties
    
        public virtual UserPoco Seeker
        {
            get { return _seeker; }
            set
            {
                if (!ReferenceEquals(_seeker, value))
                {
                    var previousValue = _seeker;
                    _seeker = value;
                    FixupSeeker(previousValue);
                }
            }
        }
        private UserPoco _seeker;
    
        public virtual UserPoco Target
        {
            get { return _target; }
            set
            {
                if (!ReferenceEquals(_target, value))
                {
                    var previousValue = _target;
                    _target = value;
                    FixupTarget(previousValue);
                }
            }
        }
        private UserPoco _target;

        #endregion

        #region Association Fixup
    
        private void FixupSeeker(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.SeekFriends.Contains(this))
            {
                previousValue.SeekFriends.Remove(this);
            }
    
            if (Seeker != null)
            {
                if (!Seeker.SeekFriends.Contains(this))
                {
                    Seeker.SeekFriends.Add(this);
                }
                if (SeekerId != Seeker.Id)
                {
                    SeekerId = Seeker.Id;
                }
            }
        }
    
        private void FixupTarget(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.SeekFriends1.Contains(this))
            {
                previousValue.SeekFriends1.Remove(this);
            }
    
            if (Target != null)
            {
                if (!Target.SeekFriends1.Contains(this))
                {
                    Target.SeekFriends1.Add(this);
                }
                if (TargetId != Target.Id)
                {
                    TargetId = Target.Id;
                }
            }
        }

        #endregion

    }
}
