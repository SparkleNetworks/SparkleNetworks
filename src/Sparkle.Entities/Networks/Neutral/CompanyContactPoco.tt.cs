//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Sparkle.Entities.Networks.Neutral
{
    public partial class CompanyContactPoco
    {
        #region Primitive Properties
    
        public int Id
        {
            get;
            set;
        }
    
        public int Type
        {
            get;
            set;
        }
    
        public System.DateTime Date
        {
            get;
            set;
        }
    
        public Nullable<int> ToCompanyId
        {
            get { return _toCompanyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._toCompanyId != value)
                    {
                        if (this.ToCompany != null && this.ToCompany.ID != value)
                        {
                            this.ToCompany = null;
                        }
                        this._toCompanyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _toCompanyId;
    
        public Nullable<int> FromCompanyId
        {
            get { return _fromCompanyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._fromCompanyId != value)
                    {
                        if (this.FromCompany != null && this.FromCompany.ID != value)
                        {
                            this.FromCompany = null;
                        }
                        this._fromCompanyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _fromCompanyId;
    
        public Nullable<int> FromUserId
        {
            get { return _fromUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (this._fromUserId != value)
                    {
                        if (this.FromUser != null && this.FromUser.Id != value)
                        {
                            this.FromUser = null;
                        }
                        this._fromUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _fromUserId;
    
        public string Message
        {
            get;
            set;
        }
    
        public bool IsRead
        {
            get;
            set;
        }
    
        public string FromCompanyName
        {
            get;
            set;
        }
    
        public string FromUserName
        {
            get;
            set;
        }
    
        public string FromUserEmail
        {
            get;
            set;
        }
    
        public string ToUserEmail
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual CompanyPoco FromCompany
        {
            get { return _fromCompany; }
            set
            {
                if (!ReferenceEquals(_fromCompany, value))
                {
                    var previousValue = _fromCompany;
                    _fromCompany = value;
                    FixupFromCompany(previousValue);
                }
            }
        }
        private CompanyPoco _fromCompany;
    
        public virtual CompanyPoco ToCompany
        {
            get { return _toCompany; }
            set
            {
                if (!ReferenceEquals(_toCompany, value))
                {
                    var previousValue = _toCompany;
                    _toCompany = value;
                    FixupToCompany(previousValue);
                }
            }
        }
        private CompanyPoco _toCompany;
    
        public virtual UserPoco FromUser
        {
            get { return _fromUser; }
            set
            {
                if (!ReferenceEquals(_fromUser, value))
                {
                    var previousValue = _fromUser;
                    _fromUser = value;
                    FixupFromUser(previousValue);
                }
            }
        }
        private UserPoco _fromUser;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupFromCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyContactsSent.Contains(this))
            {
                previousValue.CompanyContactsSent.Remove(this);
            }
    
            if (FromCompany != null)
            {
                if (!FromCompany.CompanyContactsSent.Contains(this))
                {
                    FromCompany.CompanyContactsSent.Add(this);
                }
                if (FromCompanyId != FromCompany.ID)
                {
                    FromCompanyId = FromCompany.ID;
                }
            }
            else if (!_settingFK)
            {
                FromCompanyId = null;
            }
        }
    
        private void FixupToCompany(CompanyPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyContactsReceived.Contains(this))
            {
                previousValue.CompanyContactsReceived.Remove(this);
            }
    
            if (ToCompany != null)
            {
                if (!ToCompany.CompanyContactsReceived.Contains(this))
                {
                    ToCompany.CompanyContactsReceived.Add(this);
                }
                if (ToCompanyId != ToCompany.ID)
                {
                    ToCompanyId = ToCompany.ID;
                }
            }
            else if (!_settingFK)
            {
                ToCompanyId = null;
            }
        }
    
        private void FixupFromUser(UserPoco previousValue)
        {
            if (previousValue != null && previousValue.CompanyContacts.Contains(this))
            {
                previousValue.CompanyContacts.Remove(this);
            }
    
            if (FromUser != null)
            {
                if (!FromUser.CompanyContacts.Contains(this))
                {
                    FromUser.CompanyContacts.Add(this);
                }
                if (FromUserId != FromUser.Id)
                {
                    FromUserId = FromUser.Id;
                }
            }
            else if (!_settingFK)
            {
                FromUserId = null;
            }
        }

        #endregion

    }
}
