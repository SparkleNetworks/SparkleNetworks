<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".tt.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
//===================================
// Initialisation
//===================================

var projectPath = Path.GetDirectoryName(this.Host.TemplateFile);
var projectName = Path.GetFileName(projectPath);
var solutionPath =  Path.GetDirectoryName(projectPath);
#>
// solutionPath:            <#= solutionPath.Replace(solutionPath, "<solution>") #>
// projectPath:             <#= projectPath.Replace(solutionPath, "<solution>") #>
// projectName:             <#= projectName #>

namespace Sparkle.Services.Main.Networks
{
    using System;
	using Sparkle.Services.Networks;

    [System.Diagnostics.DebuggerStepThrough]
    public partial class MainServiceFactory : IServiceFactory
    {
<#
foreach (var item in Directory.GetFiles(projectPath, "*Service.cs").OrderBy(x => x).ToList()) {
    string iname = Path.GetFileNameWithoutExtension(item);
    //iname = item.Substring(0, item.IndexOf('.'));
    string name = iname.Substring(0, iname.IndexOf("Service"));
#>
        private I<#=iname#> _<#=name#>;
        I<#=iname#> IServiceFactory.<#=name#> { get { return this._<#=name#> ?? (this._<#=name#> = new <#=iname#>(this.MySelf.Repositories, this)); } }

<#
}
#>
    }
}
