//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Sparkle.Entities;


[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Activities_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "Activities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Activity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Activities_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Activities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Activity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Ads_AdsCategories", "AdCategories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.AdCategory), "Ads", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Ad), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Ads_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Ads", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Ad), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_AdTimeline", "Ads", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Ad), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Pictures_Album", "Albums", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Album), "Pictures", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Picture), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompaniesNews_Company", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "CompanyNews", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyNew), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompaniesVisits_Company", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompaniesVisits", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompaniesVisit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyAdmins_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyAdmins", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyAdmin), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanySkills_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanySkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanySkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeMaterials_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "ExchangeMaterials", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeMaterial), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSkills_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "ExchangeSkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSurfaces_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "ExchangeSurfaces", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSurface), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Invited_Company", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "Invited", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Invited), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Places_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "Places", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Place), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Teams_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Team), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_CompanyTimeline", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Users_Companies", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.User), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompaniesVisits_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "CompaniesVisits", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompaniesVisit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyAdmins_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "CompanyAdmins", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyAdmin), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyNews_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "CompanyNews", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyNew), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanySkills_Skill", "Skills", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "CompanySkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanySkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Contacts_Contact", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Contacts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Contact), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Contacts_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Contacts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Contact), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_EventCategories", "EventCategories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.EventCategory), "Events", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_EventMembers_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "EventMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EventMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisteredToEvent_eura_Events", "Events", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Event), "EventMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EventMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Events", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_EventTimeline", "Events", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Event), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeMaterials_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "ExchangeMaterials", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeMaterial), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSkills_CreatedBy", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "ExchangeSkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSkills_Skill", "Skills", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "ExchangeSkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSurfaces_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "ExchangeSurfaces", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSurface), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupCategories_ParentCategory", "GroupCategories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.GroupCategory), "GroupCategories1", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.GroupCategory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Groups_Group", "GroupCategories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.GroupCategory), "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Group), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupMembers_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "GroupMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupsMembers_Group", "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Group), "GroupMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Groups_CreatedBy", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Group), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_GroupTimeline", "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Group), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_InformationNotes_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "InformationNotes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.InformationNote), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Interests_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Interests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Interest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserInterests_Interest", "Interests", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Interest), "UserInterests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Invited_Inviter", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Invited", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Invited), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Invited_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Invited", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Invited), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_JobByBusiness_Job", "Jobs", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Job), "JobByBusiness", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.JobByBusiness), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Users_Jobs", "Jobs", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Job), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.User), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Links_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Links", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Link), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ListItems_Lists", "Lists", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.List), "ListItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ListItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ListItems_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "ListItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ListItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Lists_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Lists", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.List), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Live_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Live", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Live), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_LostItems_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "LostItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.LostItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_MenuPlanning_Menus", "Menus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Menu), "MenuPlanning", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.MenuPlanning), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Messages_FromUser", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Messages", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Message), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Messages_ToUser", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Messages", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Message), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Places_PlaceCategories", "PlaceCategories", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.PlaceCategory), "Places", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Place), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_PlacesHistory_Places", "Places", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Place), "PlaceHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PlaceHistory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_PollAnswers_PollChoices", "PollChoices", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.PollChoice), "PollAnswers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PollAnswer), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_PollAnswers_Polls", "Polls", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Poll), "PollAnswers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PollAnswer), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_PollChoices_Polls", "Polls", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Poll), "PollChoices", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PollChoice), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ProjectMembers_Project", "Projects", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Project), "ProjectMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ProjectMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_ProjectTimeline", "Projects", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Project), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Recreations_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Recreations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Recreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserRecreations_Recreation", "Recreations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Recreation), "UserRecreations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Users_Relationship", "Relationship", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Relationship), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.User), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserSkills_Skill", "Skills", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "UserSkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TeamMembers_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TeamMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TeamMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TeamsMembers_Team", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Team), "TeamMembers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TeamMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_TeamTimeline", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Team), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItemComments_TimelineItem", "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TimelineItem), "TimelineItemComments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemComment), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_PostedBy", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_UserTimeline", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "TimelineItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TouchCommunicationItems_TouchCommunication", "TouchCommunications", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TouchCommunication), "TouchCommunicationItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TouchCommunicationItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserInterests_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserInterests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserRecreations_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserRecreations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserSkills_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserSkills", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UsersVisits_Profile", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UsersVisits", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UsersVisit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UsersVisits_User", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UsersVisits", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UsersVisit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SeekFriends_Seeker", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "SeekFriend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SeekFriend), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SeekFriends_Target", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "SeekFriend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SeekFriend), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ProjectMembers_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "ProjectMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ProjectMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Users_aspnetUsers", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.AspnetUsers), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.User), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK__aspnet_Me__UserI__190BB0C3", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.AspnetUsers), "aspnet_Membership", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.AspnetMembership), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItemComments_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TimelineItemComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemComment), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Notifications_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Notification", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Notification), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_Group", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Group), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_Place", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Place), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_Project", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Project), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_Team", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Team), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Places_ParentPlace", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Place), "Place1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Place), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_DevicePlanning_DeviceId", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Device), "DevicePlanning", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.DevicePlanning), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_AchievementsCompanies_Achievement", "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Achievement), "AchievementsCompany", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AchievementsCompany), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_AchievementsCompanies_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "AchievementsCompany", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AchievementsCompany), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_AchievementsUsers_Achievement", "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Achievement), "AchievementsUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AchievementsUser), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_AchievementsUsers_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "AchievementsUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AchievementsUser), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisterRequests_ReplyUserId", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "RegisterRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RegisterRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisterRequests_ValidatedByUserId", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "RegisterRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RegisterRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Achievements_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Achievement), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_AdCategories_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "AdCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AdCategory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Buildings_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Building), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Companies_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Company), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_DeviceConfiguration_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "DeviceConfiguration", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.DeviceConfiguration), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Devices_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Device), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_EventCategories_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "EventCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EventCategory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Events_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Event), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeMaterials_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "ExchangeMaterial", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeMaterial), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSkills_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "ExchangeSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ExchangeSurfaces_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "ExchangeSurface", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ExchangeSurface), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Groups_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Group), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_InformationNotes_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "InformationNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.InformationNote), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Live_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Live", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Live), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_LostItems_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "LostItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.LostItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Numbers_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Number", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Number), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Places_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Place), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisterRequests_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "RegisterRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RegisterRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RequestsForProposal_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "RequestForProposal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RequestForProposal), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TimelineItems_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_TouchCommunications_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "TouchCommunication", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TouchCommunication), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CareerOpportunities_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CareerOpportunity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CareerOpportunity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CareerOpportunities_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "CareerOpportunity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CareerOpportunity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CareerOpportunities_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "CareerOpportunity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CareerOpportunity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkCompanySubscriptions_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "SocialNetworkCompanySubscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkCompanySubscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkStates_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "SocialNetworkState", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkState), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkConnections_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "SocialNetworkConnection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkConnection), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkUserSubscriptions_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "SocialNetworkUserSubscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkUserSubscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkCompanySubscriptions_SocialNetworkConnection", "SocialNetworkConnection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.SocialNetworkConnection), "SocialNetworkCompanySubscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkCompanySubscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_SocialNetworkUserSubscriptions_SocialNetworkConnection", "SocialNetworkConnection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.SocialNetworkConnection), "SocialNetworkUserSubscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SocialNetworkUserSubscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Users_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.User), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Resumes_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Resume", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Resume), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyContacts_FromCompanyId", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "CompanyContact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyContact), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyContacts_ToCompanyId", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "CompanyContact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyContact), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyContacts_FromUserId", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "CompanyContact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyContact), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CreateNetworkRequests_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "CreateNetworkRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CreateNetworkRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ResumeSkills_Resumes", "Resume", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Resume), "ResumeSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ResumeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ResumeSkills_Skills", "Skill", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "ResumeSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ResumeSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_StatsCounterHits_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "StatsCounterHit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StatsCounterHit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_StatsCounterHits_Counter", "StatsCounter", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.StatsCounter), "StatsCounterHit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StatsCounterHit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_StatsCounterHits_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "StatsCounterHit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StatsCounterHit), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyRequests_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "PK_dbo_CompanyRequestMessages_CompanyRequest", "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.CompanyRequest), "CompanyRequestMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequestMessage), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "PK_dbo_CompanyRequestMessages_FromUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "CompanyRequestMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequestMessage), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyRequests_ApprovedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyRequests_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyRequests_BlockedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyRequests_Category", "CompanyCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.CompanyCategory), "CompanyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Networks_Type", "NetworkType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.NetworkType), "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Network), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Clubs_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Club", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Club), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Clubs_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "Club", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Club), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserActionKeysUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserActionKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserActionKey), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_EventPublicMembers_Event", "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Event), "EventPublicMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EventPublicMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemSkills_Skill", "Skill", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "TimelineItemSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemSkills_TimelineItem", "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TimelineItem), "TimelineItemSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemSkills_CreatedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TimelineItemSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemSkills_DeletedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "TimelineItemSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItems_DeletedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupSkills_Groups", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Group), "GroupSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupSkills_Skills", "Skill", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Skill), "GroupSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupSkills_CreatedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "GroupSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupSkills_DeletedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupSkill", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupSkill), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupInterests_CreatedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "GroupInterest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupInterests_DeletedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupInterest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupInterests_Group", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Group), "GroupInterest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupInterests_Skill", "Interest", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Interest), "GroupInterest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupInterest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupRecreations_CreatedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "GroupRecreation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupRecreations_DeletedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupRecreation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupRecreations_Group", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Group), "GroupRecreation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupRecreations_Skill", "Recreation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Recreation), "GroupRecreation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupRecreation), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisterRequests_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "RegisterRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RegisterRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_RegisterRequests_AcceptedInvitation", "Invited", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Invited), "RegisterRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.RegisterRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_EmailMessages_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "EmailMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EmailMessage), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_EmailMessages_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "EmailMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.EmailMessage), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserEmailChangeRequests_ActingUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserEmailChangeRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserEmailChangeRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserEmailChangeRequests_ConcernedUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserEmailChangeRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserEmailChangeRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_UserEmailChangeRequests_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "UserEmailChangeRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserEmailChangeRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_InboundEmailMessages_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "InboundEmailMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.InboundEmailMessage), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItems_InboundEmailId", "InboundEmailMessage", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.InboundEmailMessage), "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Likes_TimelineItems", "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TimelineItem), "Like", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemLike), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Likes_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "Like", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemLike), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_LikeComments_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "LikeComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemCommentLike), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_LikesComment_TimelineItemComments", "TimelineItemComment", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TimelineItemComment), "LikeComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemCommentLike), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupsMembers_AcceptedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_GroupsMembers_InvitedBy", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupMember), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Companies_UserFirstChange", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Company), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Companies_UserLastChange", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Company), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserProfileFields_ProfileFields", "ProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.ProfileField), "UserProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserProfileFields_Users", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_ProfileFieldsAvailiableValues_ProfileFields", "ProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.ProfileField), "ProfileFieldsAvailiableValue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ProfileFieldsAvailiableValue), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_CreatedCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_CreatedUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_AcceptedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_RefusedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_JoinCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyProfileFields_Users", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyProfileFields_ProfileFields", "ProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.ProfileField), "CompanyProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_AppliesToCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_OwnerCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Company), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_AppliesToUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_OwnerUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_Template", "SubscriptionTemplate", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.SubscriptionTemplate), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_SubscriptionTemplates_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "SubscriptionTemplate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SubscriptionTemplate), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Subscriptions_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_StripeTransactions_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "StripeTransaction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StripeTransaction), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_StripeTransactions_Users", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "StripeTransaction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StripeTransaction), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "StripeSubscriptions", "StripeTransaction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.StripeTransaction), "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Subscription))]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TagDefinitions_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TagDefinition), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TagDefinitions_TagCategories", "TagCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagCategory), "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TagDefinition), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TagDefinitions_Users", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TagDefinition), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResources_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResource), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResources_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResource), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResources_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResource), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResourcesProfileFields_PartnerResources", "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.PartnerResource), "PartnerResourceProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResourceProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResourcesProfileFields_ProfileFields", "ProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.ProfileField), "PartnerResourceProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResourceProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResourceTags_PartnerResources", "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.PartnerResource), "PartnerResourceTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResourceTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResourceTags_TagDefinitions", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "PartnerResourceTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResourceTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItems_PartnerResources", "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.PartnerResource), "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItem), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PartnerResources_ApprovedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "PartnerResource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PartnerResource), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_SubscriptionNotifications_Subscriptions", "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Subscription), "SubscriptionNotification", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.SubscriptionNotification), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_ApplyRequests_InvitedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "ApplyRequest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.ApplyRequest), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyCategories_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "CompanyCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyCategory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyRelationships_MasterCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyRelationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRelationship), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyRelationships_SlaveCompany", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyRelationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRelationship), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyRelationships_CompanyRelationshipTypes", "CompanyRelationshipType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.CompanyRelationshipType), "CompanyRelationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRelationship), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_CompanyRelationshipTypes_Networks", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "CompanyRelationshipType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyRelationshipType), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Companies_Category", "CompanyCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.CompanyCategory), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Company), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyPlaces_Companies", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyPlace", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyPlace), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyPlaces_Places", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Place), "CompanyPlace", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyPlace), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PlaceProfileFields_Places", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Place), "PlaceProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PlaceProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_PlaceProfileFields_ProfileFields", "ProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.ProfileField), "PlaceProfileField", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.PlaceProfileField), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TagCategories_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "TagCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TagCategory), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyTags_Companies", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Company), "CompanyTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyTags_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "CompanyTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyTags_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "CompanyTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_CompanyTags_Tags", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "CompanyTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.CompanyTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Invited_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Invited", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Invited), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserTags_Tags", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "UserTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserTags_Companies", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserTags_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserTags_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "UserTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupTags_Relation", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Group), "GroupTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupTags_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "GroupTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupTags_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "GroupTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_GroupTags_Tag", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "GroupTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.GroupTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemTags_Tag", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "TimelineItemTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemTags_Relation", "TimelineItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TimelineItem), "TimelineItemTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemTags_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "TimelineItemTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_TimelineItemTags_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "TimelineItemTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.TimelineItemTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Ads_CloseUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Ad", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Ad), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Ads_NetworkId", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "Ad", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Ad), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Ads_ValidationUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "Ad", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Ad), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_AdTags_Relation", "Ad", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Ad), "AdTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AdTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_AdTags_CreatedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "AdTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AdTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_AdTags_DeletedByUser", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.User), "AdTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AdTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_AdTags_Tag", "TagDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.TagDefinition), "AdTag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.AdTag), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_Activities_Ad", "Ad", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Ad), "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Activity), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Hints_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Sparkle.Entities.Networks.Network), "Hint", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Hint), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_HintsToUsers_Hint", "Hint", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Hint), "HintsToUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.HintsToUser), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_HintsToUsers_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "HintsToUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.HintsToUser), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_UserPresences_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.User), "UserPresence", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.UserPresence), true)]
[assembly: EdmRelationshipAttribute("NetworksModel", "FK_dbo_Network", "Network", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sparkle.Entities.Networks.Network), "Page", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Sparkle.Entities.Networks.Page), true)]

#endregion



namespace Sparkle.Entities.Networks
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("EdmxTool", "1.0.0.0")]
    public partial class NetworksEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new NetworksEntities object using the connection string found in the 'NetworksEntities' section of the application configuration file.
        /// </summary>
        public NetworksEntities() : base("name=NetworksEntities", "NetworksEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NetworksEntities object.
        /// </summary>
        public NetworksEntities(string connectionString) : base(connectionString, "NetworksEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NetworksEntities object.
        /// </summary>
        public NetworksEntities(EntityConnection connection) : base(connection, "NetworksEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Achievement> Achievements
        {
            get
            {
                if ((_Achievements == null))
                {
                    _Achievements = base.CreateObjectSet<Achievement>("Achievements");
                }
                return _Achievements;
            }
        }
        private ObjectSet<Achievement> _Achievements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Activity> Activities
        {
            get
            {
                if ((_Activities == null))
                {
                    _Activities = base.CreateObjectSet<Activity>("Activities");
                }
                return _Activities;
            }
        }
        private ObjectSet<Activity> _Activities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AdCategory> AdCategories
        {
            get
            {
                if ((_AdCategories == null))
                {
                    _AdCategories = base.CreateObjectSet<AdCategory>("AdCategories");
                }
                return _AdCategories;
            }
        }
        private ObjectSet<AdCategory> _AdCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Ad> Ads
        {
            get
            {
                if ((_Ads == null))
                {
                    _Ads = base.CreateObjectSet<Ad>("Ads");
                }
                return _Ads;
            }
        }
        private ObjectSet<Ad> _Ads;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Album> Albums
        {
            get
            {
                if ((_Albums == null))
                {
                    _Albums = base.CreateObjectSet<Album>("Albums");
                }
                return _Albums;
            }
        }
        private ObjectSet<Album> _Albums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Building> Buildings
        {
            get
            {
                if ((_Buildings == null))
                {
                    _Buildings = base.CreateObjectSet<Building>("Buildings");
                }
                return _Buildings;
            }
        }
        private ObjectSet<Building> _Buildings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Company>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Company> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompaniesVisit> CompaniesVisits
        {
            get
            {
                if ((_CompaniesVisits == null))
                {
                    _CompaniesVisits = base.CreateObjectSet<CompaniesVisit>("CompaniesVisits");
                }
                return _CompaniesVisits;
            }
        }
        private ObjectSet<CompaniesVisit> _CompaniesVisits;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyAdmin> CompanyAdmins
        {
            get
            {
                if ((_CompanyAdmins == null))
                {
                    _CompanyAdmins = base.CreateObjectSet<CompanyAdmin>("CompanyAdmins");
                }
                return _CompanyAdmins;
            }
        }
        private ObjectSet<CompanyAdmin> _CompanyAdmins;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyNew> CompanyNews
        {
            get
            {
                if ((_CompanyNews == null))
                {
                    _CompanyNews = base.CreateObjectSet<CompanyNew>("CompanyNews");
                }
                return _CompanyNews;
            }
        }
        private ObjectSet<CompanyNew> _CompanyNews;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanySkill> CompanySkills
        {
            get
            {
                if ((_CompanySkills == null))
                {
                    _CompanySkills = base.CreateObjectSet<CompanySkill>("CompanySkills");
                }
                return _CompanySkills;
            }
        }
        private ObjectSet<CompanySkill> _CompanySkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Contact> Contacts
        {
            get
            {
                if ((_Contacts == null))
                {
                    _Contacts = base.CreateObjectSet<Contact>("Contacts");
                }
                return _Contacts;
            }
        }
        private ObjectSet<Contact> _Contacts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Device> Devices
        {
            get
            {
                if ((_Devices == null))
                {
                    _Devices = base.CreateObjectSet<Device>("Devices");
                }
                return _Devices;
            }
        }
        private ObjectSet<Device> _Devices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventCategory> EventCategories
        {
            get
            {
                if ((_EventCategories == null))
                {
                    _EventCategories = base.CreateObjectSet<EventCategory>("EventCategories");
                }
                return _EventCategories;
            }
        }
        private ObjectSet<EventCategory> _EventCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventMember> EventMembers
        {
            get
            {
                if ((_EventMembers == null))
                {
                    _EventMembers = base.CreateObjectSet<EventMember>("EventMembers");
                }
                return _EventMembers;
            }
        }
        private ObjectSet<EventMember> _EventMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Event> Events
        {
            get
            {
                if ((_Events == null))
                {
                    _Events = base.CreateObjectSet<Event>("Events");
                }
                return _Events;
            }
        }
        private ObjectSet<Event> _Events;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExchangeMaterial> ExchangeMaterials
        {
            get
            {
                if ((_ExchangeMaterials == null))
                {
                    _ExchangeMaterials = base.CreateObjectSet<ExchangeMaterial>("ExchangeMaterials");
                }
                return _ExchangeMaterials;
            }
        }
        private ObjectSet<ExchangeMaterial> _ExchangeMaterials;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExchangeSkill> ExchangeSkills
        {
            get
            {
                if ((_ExchangeSkills == null))
                {
                    _ExchangeSkills = base.CreateObjectSet<ExchangeSkill>("ExchangeSkills");
                }
                return _ExchangeSkills;
            }
        }
        private ObjectSet<ExchangeSkill> _ExchangeSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExchangeSurface> ExchangeSurfaces
        {
            get
            {
                if ((_ExchangeSurfaces == null))
                {
                    _ExchangeSurfaces = base.CreateObjectSet<ExchangeSurface>("ExchangeSurfaces");
                }
                return _ExchangeSurfaces;
            }
        }
        private ObjectSet<ExchangeSurface> _ExchangeSurfaces;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupCategory> GroupCategories
        {
            get
            {
                if ((_GroupCategories == null))
                {
                    _GroupCategories = base.CreateObjectSet<GroupCategory>("GroupCategories");
                }
                return _GroupCategories;
            }
        }
        private ObjectSet<GroupCategory> _GroupCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupMember> GroupMembers
        {
            get
            {
                if ((_GroupMembers == null))
                {
                    _GroupMembers = base.CreateObjectSet<GroupMember>("GroupMembers");
                }
                return _GroupMembers;
            }
        }
        private ObjectSet<GroupMember> _GroupMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Group> Groups
        {
            get
            {
                if ((_Groups == null))
                {
                    _Groups = base.CreateObjectSet<Group>("Groups");
                }
                return _Groups;
            }
        }
        private ObjectSet<Group> _Groups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InformationNote> InformationNotes
        {
            get
            {
                if ((_InformationNotes == null))
                {
                    _InformationNotes = base.CreateObjectSet<InformationNote>("InformationNotes");
                }
                return _InformationNotes;
            }
        }
        private ObjectSet<InformationNote> _InformationNotes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Interest> Interests
        {
            get
            {
                if ((_Interests == null))
                {
                    _Interests = base.CreateObjectSet<Interest>("Interests");
                }
                return _Interests;
            }
        }
        private ObjectSet<Interest> _Interests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Invited> Inviteds
        {
            get
            {
                if ((_Inviteds == null))
                {
                    _Inviteds = base.CreateObjectSet<Invited>("Inviteds");
                }
                return _Inviteds;
            }
        }
        private ObjectSet<Invited> _Inviteds;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<JobByBusiness> JobByBusinesses
        {
            get
            {
                if ((_JobByBusinesses == null))
                {
                    _JobByBusinesses = base.CreateObjectSet<JobByBusiness>("JobByBusinesses");
                }
                return _JobByBusinesses;
            }
        }
        private ObjectSet<JobByBusiness> _JobByBusinesses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Job> Jobs
        {
            get
            {
                if ((_Jobs == null))
                {
                    _Jobs = base.CreateObjectSet<Job>("Jobs");
                }
                return _Jobs;
            }
        }
        private ObjectSet<Job> _Jobs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Link> Links
        {
            get
            {
                if ((_Links == null))
                {
                    _Links = base.CreateObjectSet<Link>("Links");
                }
                return _Links;
            }
        }
        private ObjectSet<Link> _Links;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ListItem> ListItems
        {
            get
            {
                if ((_ListItems == null))
                {
                    _ListItems = base.CreateObjectSet<ListItem>("ListItems");
                }
                return _ListItems;
            }
        }
        private ObjectSet<ListItem> _ListItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<List> Lists
        {
            get
            {
                if ((_Lists == null))
                {
                    _Lists = base.CreateObjectSet<List>("Lists");
                }
                return _Lists;
            }
        }
        private ObjectSet<List> _Lists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Live> Lives
        {
            get
            {
                if ((_Lives == null))
                {
                    _Lives = base.CreateObjectSet<Live>("Lives");
                }
                return _Lives;
            }
        }
        private ObjectSet<Live> _Lives;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LostItem> LostItems
        {
            get
            {
                if ((_LostItems == null))
                {
                    _LostItems = base.CreateObjectSet<LostItem>("LostItems");
                }
                return _LostItems;
            }
        }
        private ObjectSet<LostItem> _LostItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MenuPlanning> MenuPlannings
        {
            get
            {
                if ((_MenuPlannings == null))
                {
                    _MenuPlannings = base.CreateObjectSet<MenuPlanning>("MenuPlannings");
                }
                return _MenuPlannings;
            }
        }
        private ObjectSet<MenuPlanning> _MenuPlannings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Menu> Menus
        {
            get
            {
                if ((_Menus == null))
                {
                    _Menus = base.CreateObjectSet<Menu>("Menus");
                }
                return _Menus;
            }
        }
        private ObjectSet<Menu> _Menus;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Message> Messages
        {
            get
            {
                if ((_Messages == null))
                {
                    _Messages = base.CreateObjectSet<Message>("Messages");
                }
                return _Messages;
            }
        }
        private ObjectSet<Message> _Messages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Notification> Notifications
        {
            get
            {
                if ((_Notifications == null))
                {
                    _Notifications = base.CreateObjectSet<Notification>("Notifications");
                }
                return _Notifications;
            }
        }
        private ObjectSet<Notification> _Notifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Number> Numbers
        {
            get
            {
                if ((_Numbers == null))
                {
                    _Numbers = base.CreateObjectSet<Number>("Numbers");
                }
                return _Numbers;
            }
        }
        private ObjectSet<Number> _Numbers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Picture> Pictures
        {
            get
            {
                if ((_Pictures == null))
                {
                    _Pictures = base.CreateObjectSet<Picture>("Pictures");
                }
                return _Pictures;
            }
        }
        private ObjectSet<Picture> _Pictures;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlaceCategory> PlaceCategories
        {
            get
            {
                if ((_PlaceCategories == null))
                {
                    _PlaceCategories = base.CreateObjectSet<PlaceCategory>("PlaceCategories");
                }
                return _PlaceCategories;
            }
        }
        private ObjectSet<PlaceCategory> _PlaceCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlaceHistory> PlaceHistories
        {
            get
            {
                if ((_PlaceHistories == null))
                {
                    _PlaceHistories = base.CreateObjectSet<PlaceHistory>("PlaceHistories");
                }
                return _PlaceHistories;
            }
        }
        private ObjectSet<PlaceHistory> _PlaceHistories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Place> Places
        {
            get
            {
                if ((_Places == null))
                {
                    _Places = base.CreateObjectSet<Place>("Places");
                }
                return _Places;
            }
        }
        private ObjectSet<Place> _Places;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PollAnswer> PollAnswers
        {
            get
            {
                if ((_PollAnswers == null))
                {
                    _PollAnswers = base.CreateObjectSet<PollAnswer>("PollAnswers");
                }
                return _PollAnswers;
            }
        }
        private ObjectSet<PollAnswer> _PollAnswers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PollChoice> PollChoices
        {
            get
            {
                if ((_PollChoices == null))
                {
                    _PollChoices = base.CreateObjectSet<PollChoice>("PollChoices");
                }
                return _PollChoices;
            }
        }
        private ObjectSet<PollChoice> _PollChoices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Poll> Polls
        {
            get
            {
                if ((_Polls == null))
                {
                    _Polls = base.CreateObjectSet<Poll>("Polls");
                }
                return _Polls;
            }
        }
        private ObjectSet<Poll> _Polls;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProjectMember> ProjectMembers
        {
            get
            {
                if ((_ProjectMembers == null))
                {
                    _ProjectMembers = base.CreateObjectSet<ProjectMember>("ProjectMembers");
                }
                return _ProjectMembers;
            }
        }
        private ObjectSet<ProjectMember> _ProjectMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Project> Projects
        {
            get
            {
                if ((_Projects == null))
                {
                    _Projects = base.CreateObjectSet<Project>("Projects");
                }
                return _Projects;
            }
        }
        private ObjectSet<Project> _Projects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Recreation> Recreations
        {
            get
            {
                if ((_Recreations == null))
                {
                    _Recreations = base.CreateObjectSet<Recreation>("Recreations");
                }
                return _Recreations;
            }
        }
        private ObjectSet<Recreation> _Recreations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Relationship> Relationships
        {
            get
            {
                if ((_Relationships == null))
                {
                    _Relationships = base.CreateObjectSet<Relationship>("Relationships");
                }
                return _Relationships;
            }
        }
        private ObjectSet<Relationship> _Relationships;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SeekFriend> SeekFriends
        {
            get
            {
                if ((_SeekFriends == null))
                {
                    _SeekFriends = base.CreateObjectSet<SeekFriend>("SeekFriends");
                }
                return _SeekFriends;
            }
        }
        private ObjectSet<SeekFriend> _SeekFriends;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Skill> Skills
        {
            get
            {
                if ((_Skills == null))
                {
                    _Skills = base.CreateObjectSet<Skill>("Skills");
                }
                return _Skills;
            }
        }
        private ObjectSet<Skill> _Skills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TeamMember> TeamMembers
        {
            get
            {
                if ((_TeamMembers == null))
                {
                    _TeamMembers = base.CreateObjectSet<TeamMember>("TeamMembers");
                }
                return _TeamMembers;
            }
        }
        private ObjectSet<TeamMember> _TeamMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Team> Teams
        {
            get
            {
                if ((_Teams == null))
                {
                    _Teams = base.CreateObjectSet<Team>("Teams");
                }
                return _Teams;
            }
        }
        private ObjectSet<Team> _Teams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItemComment> TimelineItemComments
        {
            get
            {
                if ((_TimelineItemComments == null))
                {
                    _TimelineItemComments = base.CreateObjectSet<TimelineItemComment>("TimelineItemComments");
                }
                return _TimelineItemComments;
            }
        }
        private ObjectSet<TimelineItemComment> _TimelineItemComments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItem> TimelineItems
        {
            get
            {
                if ((_TimelineItems == null))
                {
                    _TimelineItems = base.CreateObjectSet<TimelineItem>("TimelineItems");
                }
                return _TimelineItems;
            }
        }
        private ObjectSet<TimelineItem> _TimelineItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TouchCommunicationItem> TouchCommunicationItems
        {
            get
            {
                if ((_TouchCommunicationItems == null))
                {
                    _TouchCommunicationItems = base.CreateObjectSet<TouchCommunicationItem>("TouchCommunicationItems");
                }
                return _TouchCommunicationItems;
            }
        }
        private ObjectSet<TouchCommunicationItem> _TouchCommunicationItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TouchCommunication> TouchCommunications
        {
            get
            {
                if ((_TouchCommunications == null))
                {
                    _TouchCommunications = base.CreateObjectSet<TouchCommunication>("TouchCommunications");
                }
                return _TouchCommunications;
            }
        }
        private ObjectSet<TouchCommunication> _TouchCommunications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserInterest> UserInterests
        {
            get
            {
                if ((_UserInterests == null))
                {
                    _UserInterests = base.CreateObjectSet<UserInterest>("UserInterests");
                }
                return _UserInterests;
            }
        }
        private ObjectSet<UserInterest> _UserInterests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserRecreation> UserRecreations
        {
            get
            {
                if ((_UserRecreations == null))
                {
                    _UserRecreations = base.CreateObjectSet<UserRecreation>("UserRecreations");
                }
                return _UserRecreations;
            }
        }
        private ObjectSet<UserRecreation> _UserRecreations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserSkill> UserSkills
        {
            get
            {
                if ((_UserSkills == null))
                {
                    _UserSkills = base.CreateObjectSet<UserSkill>("UserSkills");
                }
                return _UserSkills;
            }
        }
        private ObjectSet<UserSkill> _UserSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UsersVisit> UsersVisits
        {
            get
            {
                if ((_UsersVisits == null))
                {
                    _UsersVisits = base.CreateObjectSet<UsersVisit>("UsersVisits");
                }
                return _UsersVisits;
            }
        }
        private ObjectSet<UsersVisit> _UsersVisits;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AspnetUsers> AspnetUser
        {
            get
            {
                if ((_AspnetUser == null))
                {
                    _AspnetUser = base.CreateObjectSet<AspnetUsers>("AspnetUser");
                }
                return _AspnetUser;
            }
        }
        private ObjectSet<AspnetUsers> _AspnetUser;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AspnetMembership> AspnetMemberships
        {
            get
            {
                if ((_AspnetMemberships == null))
                {
                    _AspnetMemberships = base.CreateObjectSet<AspnetMembership>("AspnetMemberships");
                }
                return _AspnetMemberships;
            }
        }
        private ObjectSet<AspnetMembership> _AspnetMemberships;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DevicePlanning> DevicePlannings
        {
            get
            {
                if ((_DevicePlannings == null))
                {
                    _DevicePlannings = base.CreateObjectSet<DevicePlanning>("DevicePlannings");
                }
                return _DevicePlannings;
            }
        }
        private ObjectSet<DevicePlanning> _DevicePlannings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DeviceConfiguration> DeviceConfigurations
        {
            get
            {
                if ((_DeviceConfigurations == null))
                {
                    _DeviceConfigurations = base.CreateObjectSet<DeviceConfiguration>("DeviceConfigurations");
                }
                return _DeviceConfigurations;
            }
        }
        private ObjectSet<DeviceConfiguration> _DeviceConfigurations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AchievementsCompany> AchievementsCompanies
        {
            get
            {
                if ((_AchievementsCompanies == null))
                {
                    _AchievementsCompanies = base.CreateObjectSet<AchievementsCompany>("AchievementsCompanies");
                }
                return _AchievementsCompanies;
            }
        }
        private ObjectSet<AchievementsCompany> _AchievementsCompanies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AchievementsUser> AchievementsUsers
        {
            get
            {
                if ((_AchievementsUsers == null))
                {
                    _AchievementsUsers = base.CreateObjectSet<AchievementsUser>("AchievementsUsers");
                }
                return _AchievementsUsers;
            }
        }
        private ObjectSet<AchievementsUser> _AchievementsUsers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RegisterRequest> RegisterRequests
        {
            get
            {
                if ((_RegisterRequests == null))
                {
                    _RegisterRequests = base.CreateObjectSet<RegisterRequest>("RegisterRequests");
                }
                return _RegisterRequests;
            }
        }
        private ObjectSet<RegisterRequest> _RegisterRequests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RequestForProposal> RequestsForProposal
        {
            get
            {
                if ((_RequestsForProposal == null))
                {
                    _RequestsForProposal = base.CreateObjectSet<RequestForProposal>("RequestsForProposal");
                }
                return _RequestsForProposal;
            }
        }
        private ObjectSet<RequestForProposal> _RequestsForProposal;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserSetting> UserSettings
        {
            get
            {
                if ((_UserSettings == null))
                {
                    _UserSettings = base.CreateObjectSet<UserSetting>("UserSettings");
                }
                return _UserSettings;
            }
        }
        private ObjectSet<UserSetting> _UserSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventPublicMember> EventPublicMembers
        {
            get
            {
                if ((_EventPublicMembers == null))
                {
                    _EventPublicMembers = base.CreateObjectSet<EventPublicMember>("EventPublicMembers");
                }
                return _EventPublicMembers;
            }
        }
        private ObjectSet<EventPublicMember> _EventPublicMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CreateNetworkRequest> CreateNetworkRequests
        {
            get
            {
                if ((_CreateNetworkRequests == null))
                {
                    _CreateNetworkRequests = base.CreateObjectSet<CreateNetworkRequest>("CreateNetworkRequests");
                }
                return _CreateNetworkRequests;
            }
        }
        private ObjectSet<CreateNetworkRequest> _CreateNetworkRequests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Network> Networks
        {
            get
            {
                if ((_Networks == null))
                {
                    _Networks = base.CreateObjectSet<Network>("Networks");
                }
                return _Networks;
            }
        }
        private ObjectSet<Network> _Networks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CareerOpportunity> CareerOpportunities
        {
            get
            {
                if ((_CareerOpportunities == null))
                {
                    _CareerOpportunities = base.CreateObjectSet<CareerOpportunity>("CareerOpportunities");
                }
                return _CareerOpportunities;
            }
        }
        private ObjectSet<CareerOpportunity> _CareerOpportunities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SocialNetworkCompanySubscription> SocialNetworkCompanySubscriptions
        {
            get
            {
                if ((_SocialNetworkCompanySubscriptions == null))
                {
                    _SocialNetworkCompanySubscriptions = base.CreateObjectSet<SocialNetworkCompanySubscription>("SocialNetworkCompanySubscriptions");
                }
                return _SocialNetworkCompanySubscriptions;
            }
        }
        private ObjectSet<SocialNetworkCompanySubscription> _SocialNetworkCompanySubscriptions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SocialNetworkConnection> SocialNetworkConnections
        {
            get
            {
                if ((_SocialNetworkConnections == null))
                {
                    _SocialNetworkConnections = base.CreateObjectSet<SocialNetworkConnection>("SocialNetworkConnections");
                }
                return _SocialNetworkConnections;
            }
        }
        private ObjectSet<SocialNetworkConnection> _SocialNetworkConnections;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SocialNetworkState> SocialNetworkStates
        {
            get
            {
                if ((_SocialNetworkStates == null))
                {
                    _SocialNetworkStates = base.CreateObjectSet<SocialNetworkState>("SocialNetworkStates");
                }
                return _SocialNetworkStates;
            }
        }
        private ObjectSet<SocialNetworkState> _SocialNetworkStates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SocialNetworkUserSubscription> SocialNetworkUserSubscriptions
        {
            get
            {
                if ((_SocialNetworkUserSubscriptions == null))
                {
                    _SocialNetworkUserSubscriptions = base.CreateObjectSet<SocialNetworkUserSubscription>("SocialNetworkUserSubscriptions");
                }
                return _SocialNetworkUserSubscriptions;
            }
        }
        private ObjectSet<SocialNetworkUserSubscription> _SocialNetworkUserSubscriptions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyContact> CompanyContacts
        {
            get
            {
                if ((_CompanyContacts == null))
                {
                    _CompanyContacts = base.CreateObjectSet<CompanyContact>("CompanyContacts");
                }
                return _CompanyContacts;
            }
        }
        private ObjectSet<CompanyContact> _CompanyContacts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Resume> Resumes
        {
            get
            {
                if ((_Resumes == null))
                {
                    _Resumes = base.CreateObjectSet<Resume>("Resumes");
                }
                return _Resumes;
            }
        }
        private ObjectSet<Resume> _Resumes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ResumeSkill> ResumeSkills
        {
            get
            {
                if ((_ResumeSkills == null))
                {
                    _ResumeSkills = base.CreateObjectSet<ResumeSkill>("ResumeSkills");
                }
                return _ResumeSkills;
            }
        }
        private ObjectSet<ResumeSkill> _ResumeSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StatsCounterHit> StatsCounterHits
        {
            get
            {
                if ((_StatsCounterHits == null))
                {
                    _StatsCounterHits = base.CreateObjectSet<StatsCounterHit>("StatsCounterHits");
                }
                return _StatsCounterHits;
            }
        }
        private ObjectSet<StatsCounterHit> _StatsCounterHits;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StatsCounter> StatsCounters
        {
            get
            {
                if ((_StatsCounters == null))
                {
                    _StatsCounters = base.CreateObjectSet<StatsCounter>("StatsCounters");
                }
                return _StatsCounters;
            }
        }
        private ObjectSet<StatsCounter> _StatsCounters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyCategory> CompanyCategories
        {
            get
            {
                if ((_CompanyCategories == null))
                {
                    _CompanyCategories = base.CreateObjectSet<CompanyCategory>("CompanyCategories");
                }
                return _CompanyCategories;
            }
        }
        private ObjectSet<CompanyCategory> _CompanyCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NetworkType> NetworkTypes
        {
            get
            {
                if ((_NetworkTypes == null))
                {
                    _NetworkTypes = base.CreateObjectSet<NetworkType>("NetworkTypes");
                }
                return _NetworkTypes;
            }
        }
        private ObjectSet<NetworkType> _NetworkTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyRequestMessage> CompanyRequestMessages
        {
            get
            {
                if ((_CompanyRequestMessages == null))
                {
                    _CompanyRequestMessages = base.CreateObjectSet<CompanyRequestMessage>("CompanyRequestMessages");
                }
                return _CompanyRequestMessages;
            }
        }
        private ObjectSet<CompanyRequestMessage> _CompanyRequestMessages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyRequest> CompanyRequests
        {
            get
            {
                if ((_CompanyRequests == null))
                {
                    _CompanyRequests = base.CreateObjectSet<CompanyRequest>("CompanyRequests");
                }
                return _CompanyRequests;
            }
        }
        private ObjectSet<CompanyRequest> _CompanyRequests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Club> Clubs
        {
            get
            {
                if ((_Clubs == null))
                {
                    _Clubs = base.CreateObjectSet<Club>("Clubs");
                }
                return _Clubs;
            }
        }
        private ObjectSet<Club> _Clubs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserActionKey> UserActionKeys
        {
            get
            {
                if ((_UserActionKeys == null))
                {
                    _UserActionKeys = base.CreateObjectSet<UserActionKey>("UserActionKeys");
                }
                return _UserActionKeys;
            }
        }
        private ObjectSet<UserActionKey> _UserActionKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItemSkill> TimelineItemSkills
        {
            get
            {
                if ((_TimelineItemSkills == null))
                {
                    _TimelineItemSkills = base.CreateObjectSet<TimelineItemSkill>("TimelineItemSkills");
                }
                return _TimelineItemSkills;
            }
        }
        private ObjectSet<TimelineItemSkill> _TimelineItemSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupSkill> GroupSkills
        {
            get
            {
                if ((_GroupSkills == null))
                {
                    _GroupSkills = base.CreateObjectSet<GroupSkill>("GroupSkills");
                }
                return _GroupSkills;
            }
        }
        private ObjectSet<GroupSkill> _GroupSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupInterest> GroupInterests
        {
            get
            {
                if ((_GroupInterests == null))
                {
                    _GroupInterests = base.CreateObjectSet<GroupInterest>("GroupInterests");
                }
                return _GroupInterests;
            }
        }
        private ObjectSet<GroupInterest> _GroupInterests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupRecreation> GroupRecreations
        {
            get
            {
                if ((_GroupRecreations == null))
                {
                    _GroupRecreations = base.CreateObjectSet<GroupRecreation>("GroupRecreations");
                }
                return _GroupRecreations;
            }
        }
        private ObjectSet<GroupRecreation> _GroupRecreations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EmailMessage> EmailMessages
        {
            get
            {
                if ((_EmailMessages == null))
                {
                    _EmailMessages = base.CreateObjectSet<EmailMessage>("EmailMessages");
                }
                return _EmailMessages;
            }
        }
        private ObjectSet<EmailMessage> _EmailMessages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserEmailChangeRequest> UserEmailChangeRequests
        {
            get
            {
                if ((_UserEmailChangeRequests == null))
                {
                    _UserEmailChangeRequests = base.CreateObjectSet<UserEmailChangeRequest>("UserEmailChangeRequests");
                }
                return _UserEmailChangeRequests;
            }
        }
        private ObjectSet<UserEmailChangeRequest> _UserEmailChangeRequests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InboundEmailMessage> InboundEmailMessages
        {
            get
            {
                if ((_InboundEmailMessages == null))
                {
                    _InboundEmailMessages = base.CreateObjectSet<InboundEmailMessage>("InboundEmailMessages");
                }
                return _InboundEmailMessages;
            }
        }
        private ObjectSet<InboundEmailMessage> _InboundEmailMessages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItemLike> TimelineItemLikes
        {
            get
            {
                if ((_TimelineItemLikes == null))
                {
                    _TimelineItemLikes = base.CreateObjectSet<TimelineItemLike>("TimelineItemLikes");
                }
                return _TimelineItemLikes;
            }
        }
        private ObjectSet<TimelineItemLike> _TimelineItemLikes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItemCommentLike> TimelineItemCommentLikes
        {
            get
            {
                if ((_TimelineItemCommentLikes == null))
                {
                    _TimelineItemCommentLikes = base.CreateObjectSet<TimelineItemCommentLike>("TimelineItemCommentLikes");
                }
                return _TimelineItemCommentLikes;
            }
        }
        private ObjectSet<TimelineItemCommentLike> _TimelineItemCommentLikes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UsersView> UsersViews
        {
            get
            {
                if ((_UsersViews == null))
                {
                    _UsersViews = base.CreateObjectSet<UsersView>("UsersViews");
                }
                return _UsersViews;
            }
        }
        private ObjectSet<UsersView> _UsersViews;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProfileField> ProfileFields
        {
            get
            {
                if ((_ProfileFields == null))
                {
                    _ProfileFields = base.CreateObjectSet<ProfileField>("ProfileFields");
                }
                return _ProfileFields;
            }
        }
        private ObjectSet<ProfileField> _ProfileFields;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserProfileField> UserProfileFields
        {
            get
            {
                if ((_UserProfileFields == null))
                {
                    _UserProfileFields = base.CreateObjectSet<UserProfileField>("UserProfileFields");
                }
                return _UserProfileFields;
            }
        }
        private ObjectSet<UserProfileField> _UserProfileFields;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProfileFieldsAvailiableValue> ProfileFieldsAvailiableValues
        {
            get
            {
                if ((_ProfileFieldsAvailiableValues == null))
                {
                    _ProfileFieldsAvailiableValues = base.CreateObjectSet<ProfileFieldsAvailiableValue>("ProfileFieldsAvailiableValues");
                }
                return _ProfileFieldsAvailiableValues;
            }
        }
        private ObjectSet<ProfileFieldsAvailiableValue> _ProfileFieldsAvailiableValues;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ApplyRequest> ApplyRequests
        {
            get
            {
                if ((_ApplyRequests == null))
                {
                    _ApplyRequests = base.CreateObjectSet<ApplyRequest>("ApplyRequests");
                }
                return _ApplyRequests;
            }
        }
        private ObjectSet<ApplyRequest> _ApplyRequests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyProfileField> CompanyProfileFields
        {
            get
            {
                if ((_CompanyProfileFields == null))
                {
                    _CompanyProfileFields = base.CreateObjectSet<CompanyProfileField>("CompanyProfileFields");
                }
                return _CompanyProfileFields;
            }
        }
        private ObjectSet<CompanyProfileField> _CompanyProfileFields;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Subscription> Subscriptions
        {
            get
            {
                if ((_Subscriptions == null))
                {
                    _Subscriptions = base.CreateObjectSet<Subscription>("Subscriptions");
                }
                return _Subscriptions;
            }
        }
        private ObjectSet<Subscription> _Subscriptions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubscriptionTemplate> SubscriptionTemplates
        {
            get
            {
                if ((_SubscriptionTemplates == null))
                {
                    _SubscriptionTemplates = base.CreateObjectSet<SubscriptionTemplate>("SubscriptionTemplates");
                }
                return _SubscriptionTemplates;
            }
        }
        private ObjectSet<SubscriptionTemplate> _SubscriptionTemplates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StripeTransaction> StripeTransactions
        {
            get
            {
                if ((_StripeTransactions == null))
                {
                    _StripeTransactions = base.CreateObjectSet<StripeTransaction>("StripeTransactions");
                }
                return _StripeTransactions;
            }
        }
        private ObjectSet<StripeTransaction> _StripeTransactions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TagCategory> TagCategories
        {
            get
            {
                if ((_TagCategories == null))
                {
                    _TagCategories = base.CreateObjectSet<TagCategory>("TagCategories");
                }
                return _TagCategories;
            }
        }
        private ObjectSet<TagCategory> _TagCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TagDefinition> TagDefinitions
        {
            get
            {
                if ((_TagDefinitions == null))
                {
                    _TagDefinitions = base.CreateObjectSet<TagDefinition>("TagDefinitions");
                }
                return _TagDefinitions;
            }
        }
        private ObjectSet<TagDefinition> _TagDefinitions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PartnerResource> PartnerResources
        {
            get
            {
                if ((_PartnerResources == null))
                {
                    _PartnerResources = base.CreateObjectSet<PartnerResource>("PartnerResources");
                }
                return _PartnerResources;
            }
        }
        private ObjectSet<PartnerResource> _PartnerResources;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PartnerResourceProfileField> PartnerResourceProfileFields
        {
            get
            {
                if ((_PartnerResourceProfileFields == null))
                {
                    _PartnerResourceProfileFields = base.CreateObjectSet<PartnerResourceProfileField>("PartnerResourceProfileFields");
                }
                return _PartnerResourceProfileFields;
            }
        }
        private ObjectSet<PartnerResourceProfileField> _PartnerResourceProfileFields;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PartnerResourceTag> PartnerResourceTags
        {
            get
            {
                if ((_PartnerResourceTags == null))
                {
                    _PartnerResourceTags = base.CreateObjectSet<PartnerResourceTag>("PartnerResourceTags");
                }
                return _PartnerResourceTags;
            }
        }
        private ObjectSet<PartnerResourceTag> _PartnerResourceTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActiveUsersViewLight> ActiveUsersViewLights
        {
            get
            {
                if ((_ActiveUsersViewLights == null))
                {
                    _ActiveUsersViewLights = base.CreateObjectSet<ActiveUsersViewLight>("ActiveUsersViewLights");
                }
                return _ActiveUsersViewLights;
            }
        }
        private ObjectSet<ActiveUsersViewLight> _ActiveUsersViewLights;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActiveUsersViewLightEx> ActiveUsersViewLightExes
        {
            get
            {
                if ((_ActiveUsersViewLightExes == null))
                {
                    _ActiveUsersViewLightExes = base.CreateObjectSet<ActiveUsersViewLightEx>("ActiveUsersViewLightExes");
                }
                return _ActiveUsersViewLightExes;
            }
        }
        private ObjectSet<ActiveUsersViewLightEx> _ActiveUsersViewLightExes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubscriptionNotification> SubscriptionNotifications
        {
            get
            {
                if ((_SubscriptionNotifications == null))
                {
                    _SubscriptionNotifications = base.CreateObjectSet<SubscriptionNotification>("SubscriptionNotifications");
                }
                return _SubscriptionNotifications;
            }
        }
        private ObjectSet<SubscriptionNotification> _SubscriptionNotifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyRelationship> CompanyRelationships
        {
            get
            {
                if ((_CompanyRelationships == null))
                {
                    _CompanyRelationships = base.CreateObjectSet<CompanyRelationship>("CompanyRelationships");
                }
                return _CompanyRelationships;
            }
        }
        private ObjectSet<CompanyRelationship> _CompanyRelationships;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyRelationshipType> CompanyRelationshipTypes
        {
            get
            {
                if ((_CompanyRelationshipTypes == null))
                {
                    _CompanyRelationshipTypes = base.CreateObjectSet<CompanyRelationshipType>("CompanyRelationshipTypes");
                }
                return _CompanyRelationshipTypes;
            }
        }
        private ObjectSet<CompanyRelationshipType> _CompanyRelationshipTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyPlace> CompanyPlaces
        {
            get
            {
                if ((_CompanyPlaces == null))
                {
                    _CompanyPlaces = base.CreateObjectSet<CompanyPlace>("CompanyPlaces");
                }
                return _CompanyPlaces;
            }
        }
        private ObjectSet<CompanyPlace> _CompanyPlaces;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlaceProfileField> PlaceProfileFields
        {
            get
            {
                if ((_PlaceProfileFields == null))
                {
                    _PlaceProfileFields = base.CreateObjectSet<PlaceProfileField>("PlaceProfileFields");
                }
                return _PlaceProfileFields;
            }
        }
        private ObjectSet<PlaceProfileField> _PlaceProfileFields;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompanyTag> CompanyTags
        {
            get
            {
                if ((_CompanyTags == null))
                {
                    _CompanyTags = base.CreateObjectSet<CompanyTag>("CompanyTags");
                }
                return _CompanyTags;
            }
        }
        private ObjectSet<CompanyTag> _CompanyTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserTag> UserTags
        {
            get
            {
                if ((_UserTags == null))
                {
                    _UserTags = base.CreateObjectSet<UserTag>("UserTags");
                }
                return _UserTags;
            }
        }
        private ObjectSet<UserTag> _UserTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GroupTag> GroupTags
        {
            get
            {
                if ((_GroupTags == null))
                {
                    _GroupTags = base.CreateObjectSet<GroupTag>("GroupTags");
                }
                return _GroupTags;
            }
        }
        private ObjectSet<GroupTag> _GroupTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TimelineItemTag> TimelineItemTags
        {
            get
            {
                if ((_TimelineItemTags == null))
                {
                    _TimelineItemTags = base.CreateObjectSet<TimelineItemTag>("TimelineItemTags");
                }
                return _TimelineItemTags;
            }
        }
        private ObjectSet<TimelineItemTag> _TimelineItemTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AdTag> AdTags
        {
            get
            {
                if ((_AdTags == null))
                {
                    _AdTags = base.CreateObjectSet<AdTag>("AdTags");
                }
                return _AdTags;
            }
        }
        private ObjectSet<AdTag> _AdTags;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Hint> Hints
        {
            get
            {
                if ((_Hints == null))
                {
                    _Hints = base.CreateObjectSet<Hint>("Hints");
                }
                return _Hints;
            }
        }
        private ObjectSet<Hint> _Hints;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HintsToUser> HintsToUsers
        {
            get
            {
                if ((_HintsToUsers == null))
                {
                    _HintsToUsers = base.CreateObjectSet<HintsToUser>("HintsToUsers");
                }
                return _HintsToUsers;
            }
        }
        private ObjectSet<HintsToUser> _HintsToUsers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ApiKey> ApiKeys
        {
            get
            {
                if ((_ApiKeys == null))
                {
                    _ApiKeys = base.CreateObjectSet<ApiKey>("ApiKeys");
                }
                return _ApiKeys;
            }
        }
        private ObjectSet<ApiKey> _ApiKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserPresence> UserPresences
        {
            get
            {
                if ((_UserPresences == null))
                {
                    _UserPresences = base.CreateObjectSet<UserPresence>("UserPresences");
                }
                return _UserPresences;
            }
        }
        private ObjectSet<UserPresence> _UserPresences;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Page> Pages
        {
            get
            {
                if ((_Pages == null))
                {
                    _Pages = base.CreateObjectSet<Page>("Pages");
                }
                return _Pages;
            }
        }
        private ObjectSet<Page> _Pages;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Achievements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAchievements(Achievement achievement)
        {
            base.AddObject("Achievements", achievement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Activities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActivities(Activity activity)
        {
            base.AddObject("Activities", activity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AdCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAdCategories(AdCategory adCategory)
        {
            base.AddObject("AdCategories", adCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Ads EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAds(Ad ad)
        {
            base.AddObject("Ads", ad);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Albums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbums(Album album)
        {
            base.AddObject("Albums", album);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Buildings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBuildings(Building building)
        {
            base.AddObject("Buildings", building);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Company company)
        {
            base.AddObject("Companies", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompaniesVisits EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompaniesVisits(CompaniesVisit companiesVisit)
        {
            base.AddObject("CompaniesVisits", companiesVisit);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyAdmins EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyAdmins(CompanyAdmin companyAdmin)
        {
            base.AddObject("CompanyAdmins", companyAdmin);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyNews EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyNews(CompanyNew companyNew)
        {
            base.AddObject("CompanyNews", companyNew);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanySkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanySkills(CompanySkill companySkill)
        {
            base.AddObject("CompanySkills", companySkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Contacts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContacts(Contact contact)
        {
            base.AddObject("Contacts", contact);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Devices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDevices(Device device)
        {
            base.AddObject("Devices", device);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventCategories(EventCategory eventCategory)
        {
            base.AddObject("EventCategories", eventCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventMembers(EventMember eventMember)
        {
            base.AddObject("EventMembers", eventMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Events EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEvents(Event @event)
        {
            base.AddObject("Events", @event);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExchangeMaterials EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchangeMaterials(ExchangeMaterial exchangeMaterial)
        {
            base.AddObject("ExchangeMaterials", exchangeMaterial);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExchangeSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchangeSkills(ExchangeSkill exchangeSkill)
        {
            base.AddObject("ExchangeSkills", exchangeSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExchangeSurfaces EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchangeSurfaces(ExchangeSurface exchangeSurface)
        {
            base.AddObject("ExchangeSurfaces", exchangeSurface);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupCategories(GroupCategory groupCategory)
        {
            base.AddObject("GroupCategories", groupCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupMembers(GroupMember groupMember)
        {
            base.AddObject("GroupMembers", groupMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Groups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroups(Group group)
        {
            base.AddObject("Groups", group);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the InformationNotes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInformationNotes(InformationNote informationNote)
        {
            base.AddObject("InformationNotes", informationNote);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Interests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInterests(Interest interest)
        {
            base.AddObject("Interests", interest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Inviteds EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInviteds(Invited invited)
        {
            base.AddObject("Inviteds", invited);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the JobByBusinesses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToJobByBusinesses(JobByBusiness jobByBusiness)
        {
            base.AddObject("JobByBusinesses", jobByBusiness);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Jobs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToJobs(Job job)
        {
            base.AddObject("Jobs", job);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Links EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLinks(Link link)
        {
            base.AddObject("Links", link);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ListItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToListItems(ListItem listItem)
        {
            base.AddObject("ListItems", listItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Lists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLists(List list)
        {
            base.AddObject("Lists", list);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Lives EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLives(Live live)
        {
            base.AddObject("Lives", live);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LostItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLostItems(LostItem lostItem)
        {
            base.AddObject("LostItems", lostItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MenuPlannings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMenuPlannings(MenuPlanning menuPlanning)
        {
            base.AddObject("MenuPlannings", menuPlanning);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Menus EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMenus(Menu menu)
        {
            base.AddObject("Menus", menu);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Messages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMessages(Message message)
        {
            base.AddObject("Messages", message);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Notifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNotifications(Notification notification)
        {
            base.AddObject("Notifications", notification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Numbers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNumbers(Number number)
        {
            base.AddObject("Numbers", number);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Pictures EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPictures(Picture picture)
        {
            base.AddObject("Pictures", picture);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlaceCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaceCategories(PlaceCategory placeCategory)
        {
            base.AddObject("PlaceCategories", placeCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlaceHistories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaceHistories(PlaceHistory placeHistory)
        {
            base.AddObject("PlaceHistories", placeHistory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Places EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaces(Place place)
        {
            base.AddObject("Places", place);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PollAnswers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPollAnswers(PollAnswer pollAnswer)
        {
            base.AddObject("PollAnswers", pollAnswer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PollChoices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPollChoices(PollChoice pollChoice)
        {
            base.AddObject("PollChoices", pollChoice);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Polls EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPolls(Poll poll)
        {
            base.AddObject("Polls", poll);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProjectMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjectMembers(ProjectMember projectMember)
        {
            base.AddObject("ProjectMembers", projectMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Projects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjects(Project project)
        {
            base.AddObject("Projects", project);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Recreations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRecreations(Recreation recreation)
        {
            base.AddObject("Recreations", recreation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Relationships EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRelationships(Relationship relationship)
        {
            base.AddObject("Relationships", relationship);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SeekFriends EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSeekFriends(SeekFriend seekFriend)
        {
            base.AddObject("SeekFriends", seekFriend);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Skills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSkills(Skill skill)
        {
            base.AddObject("Skills", skill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TeamMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTeamMembers(TeamMember teamMember)
        {
            base.AddObject("TeamMembers", teamMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Teams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTeams(Team team)
        {
            base.AddObject("Teams", team);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItemComments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItemComments(TimelineItemComment timelineItemComment)
        {
            base.AddObject("TimelineItemComments", timelineItemComment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItems(TimelineItem timelineItem)
        {
            base.AddObject("TimelineItems", timelineItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TouchCommunicationItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTouchCommunicationItems(TouchCommunicationItem touchCommunicationItem)
        {
            base.AddObject("TouchCommunicationItems", touchCommunicationItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TouchCommunications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTouchCommunications(TouchCommunication touchCommunication)
        {
            base.AddObject("TouchCommunications", touchCommunication);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserInterests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserInterests(UserInterest userInterest)
        {
            base.AddObject("UserInterests", userInterest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserRecreations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserRecreations(UserRecreation userRecreation)
        {
            base.AddObject("UserRecreations", userRecreation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserSkills(UserSkill userSkill)
        {
            base.AddObject("UserSkills", userSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UsersVisits EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsersVisits(UsersVisit usersVisit)
        {
            base.AddObject("UsersVisits", usersVisit);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AspnetUser EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAspnetUser(AspnetUsers aspnetUsers)
        {
            base.AddObject("AspnetUser", aspnetUsers);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AspnetMemberships EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAspnetMemberships(AspnetMembership aspnetMembership)
        {
            base.AddObject("AspnetMemberships", aspnetMembership);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DevicePlannings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDevicePlannings(DevicePlanning devicePlanning)
        {
            base.AddObject("DevicePlannings", devicePlanning);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DeviceConfigurations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDeviceConfigurations(DeviceConfiguration deviceConfiguration)
        {
            base.AddObject("DeviceConfigurations", deviceConfiguration);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AchievementsCompanies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAchievementsCompanies(AchievementsCompany achievementsCompany)
        {
            base.AddObject("AchievementsCompanies", achievementsCompany);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AchievementsUsers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAchievementsUsers(AchievementsUser achievementsUser)
        {
            base.AddObject("AchievementsUsers", achievementsUser);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RegisterRequests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRegisterRequests(RegisterRequest registerRequest)
        {
            base.AddObject("RegisterRequests", registerRequest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RequestsForProposal EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRequestsForProposal(RequestForProposal requestForProposal)
        {
            base.AddObject("RequestsForProposal", requestForProposal);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserSettings(UserSetting userSetting)
        {
            base.AddObject("UserSettings", userSetting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventPublicMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventPublicMembers(EventPublicMember eventPublicMember)
        {
            base.AddObject("EventPublicMembers", eventPublicMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CreateNetworkRequests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCreateNetworkRequests(CreateNetworkRequest createNetworkRequest)
        {
            base.AddObject("CreateNetworkRequests", createNetworkRequest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Networks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNetworks(Network network)
        {
            base.AddObject("Networks", network);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CareerOpportunities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCareerOpportunities(CareerOpportunity careerOpportunity)
        {
            base.AddObject("CareerOpportunities", careerOpportunity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SocialNetworkCompanySubscriptions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSocialNetworkCompanySubscriptions(SocialNetworkCompanySubscription socialNetworkCompanySubscription)
        {
            base.AddObject("SocialNetworkCompanySubscriptions", socialNetworkCompanySubscription);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SocialNetworkConnections EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSocialNetworkConnections(SocialNetworkConnection socialNetworkConnection)
        {
            base.AddObject("SocialNetworkConnections", socialNetworkConnection);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SocialNetworkStates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSocialNetworkStates(SocialNetworkState socialNetworkState)
        {
            base.AddObject("SocialNetworkStates", socialNetworkState);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SocialNetworkUserSubscriptions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSocialNetworkUserSubscriptions(SocialNetworkUserSubscription socialNetworkUserSubscription)
        {
            base.AddObject("SocialNetworkUserSubscriptions", socialNetworkUserSubscription);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyContacts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyContacts(CompanyContact companyContact)
        {
            base.AddObject("CompanyContacts", companyContact);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Resumes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResumes(Resume resume)
        {
            base.AddObject("Resumes", resume);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ResumeSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResumeSkills(ResumeSkill resumeSkill)
        {
            base.AddObject("ResumeSkills", resumeSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StatsCounterHits EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatsCounterHits(StatsCounterHit statsCounterHit)
        {
            base.AddObject("StatsCounterHits", statsCounterHit);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StatsCounters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatsCounters(StatsCounter statsCounter)
        {
            base.AddObject("StatsCounters", statsCounter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyCategories(CompanyCategory companyCategory)
        {
            base.AddObject("CompanyCategories", companyCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NetworkTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNetworkTypes(NetworkType networkType)
        {
            base.AddObject("NetworkTypes", networkType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyRequestMessages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyRequestMessages(CompanyRequestMessage companyRequestMessage)
        {
            base.AddObject("CompanyRequestMessages", companyRequestMessage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyRequests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyRequests(CompanyRequest companyRequest)
        {
            base.AddObject("CompanyRequests", companyRequest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Clubs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClubs(Club club)
        {
            base.AddObject("Clubs", club);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserActionKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserActionKeys(UserActionKey userActionKey)
        {
            base.AddObject("UserActionKeys", userActionKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItemSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItemSkills(TimelineItemSkill timelineItemSkill)
        {
            base.AddObject("TimelineItemSkills", timelineItemSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupSkills(GroupSkill groupSkill)
        {
            base.AddObject("GroupSkills", groupSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupInterests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupInterests(GroupInterest groupInterest)
        {
            base.AddObject("GroupInterests", groupInterest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupRecreations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupRecreations(GroupRecreation groupRecreation)
        {
            base.AddObject("GroupRecreations", groupRecreation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EmailMessages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEmailMessages(EmailMessage emailMessage)
        {
            base.AddObject("EmailMessages", emailMessage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserEmailChangeRequests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserEmailChangeRequests(UserEmailChangeRequest userEmailChangeRequest)
        {
            base.AddObject("UserEmailChangeRequests", userEmailChangeRequest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the InboundEmailMessages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInboundEmailMessages(InboundEmailMessage inboundEmailMessage)
        {
            base.AddObject("InboundEmailMessages", inboundEmailMessage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItemLikes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItemLikes(TimelineItemLike timelineItemLike)
        {
            base.AddObject("TimelineItemLikes", timelineItemLike);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItemCommentLikes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItemCommentLikes(TimelineItemCommentLike timelineItemCommentLike)
        {
            base.AddObject("TimelineItemCommentLikes", timelineItemCommentLike);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UsersViews EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsersViews(UsersView usersView)
        {
            base.AddObject("UsersViews", usersView);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProfileFields EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProfileFields(ProfileField profileField)
        {
            base.AddObject("ProfileFields", profileField);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserProfileFields EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserProfileFields(UserProfileField userProfileField)
        {
            base.AddObject("UserProfileFields", userProfileField);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProfileFieldsAvailiableValues EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProfileFieldsAvailiableValues(ProfileFieldsAvailiableValue profileFieldsAvailiableValue)
        {
            base.AddObject("ProfileFieldsAvailiableValues", profileFieldsAvailiableValue);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ApplyRequests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApplyRequests(ApplyRequest applyRequest)
        {
            base.AddObject("ApplyRequests", applyRequest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyProfileFields EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyProfileFields(CompanyProfileField companyProfileField)
        {
            base.AddObject("CompanyProfileFields", companyProfileField);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Subscriptions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscriptions(Subscription subscription)
        {
            base.AddObject("Subscriptions", subscription);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubscriptionTemplates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscriptionTemplates(SubscriptionTemplate subscriptionTemplate)
        {
            base.AddObject("SubscriptionTemplates", subscriptionTemplate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StripeTransactions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStripeTransactions(StripeTransaction stripeTransaction)
        {
            base.AddObject("StripeTransactions", stripeTransaction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TagCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTagCategories(TagCategory tagCategory)
        {
            base.AddObject("TagCategories", tagCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TagDefinitions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTagDefinitions(TagDefinition tagDefinition)
        {
            base.AddObject("TagDefinitions", tagDefinition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PartnerResources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPartnerResources(PartnerResource partnerResource)
        {
            base.AddObject("PartnerResources", partnerResource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PartnerResourceProfileFields EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPartnerResourceProfileFields(PartnerResourceProfileField partnerResourceProfileField)
        {
            base.AddObject("PartnerResourceProfileFields", partnerResourceProfileField);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PartnerResourceTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPartnerResourceTags(PartnerResourceTag partnerResourceTag)
        {
            base.AddObject("PartnerResourceTags", partnerResourceTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActiveUsersViewLights EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActiveUsersViewLights(ActiveUsersViewLight activeUsersViewLight)
        {
            base.AddObject("ActiveUsersViewLights", activeUsersViewLight);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActiveUsersViewLightExes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActiveUsersViewLightExes(ActiveUsersViewLightEx activeUsersViewLightEx)
        {
            base.AddObject("ActiveUsersViewLightExes", activeUsersViewLightEx);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubscriptionNotifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscriptionNotifications(SubscriptionNotification subscriptionNotification)
        {
            base.AddObject("SubscriptionNotifications", subscriptionNotification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyRelationships EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyRelationships(CompanyRelationship companyRelationship)
        {
            base.AddObject("CompanyRelationships", companyRelationship);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyRelationshipTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyRelationshipTypes(CompanyRelationshipType companyRelationshipType)
        {
            base.AddObject("CompanyRelationshipTypes", companyRelationshipType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyPlaces EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyPlaces(CompanyPlace companyPlace)
        {
            base.AddObject("CompanyPlaces", companyPlace);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlaceProfileFields EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaceProfileFields(PlaceProfileField placeProfileField)
        {
            base.AddObject("PlaceProfileFields", placeProfileField);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompanyTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanyTags(CompanyTag companyTag)
        {
            base.AddObject("CompanyTags", companyTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserTags(UserTag userTag)
        {
            base.AddObject("UserTags", userTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupTags(GroupTag groupTag)
        {
            base.AddObject("GroupTags", groupTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TimelineItemTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTimelineItemTags(TimelineItemTag timelineItemTag)
        {
            base.AddObject("TimelineItemTags", timelineItemTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AdTags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAdTags(AdTag adTag)
        {
            base.AddObject("AdTags", adTag);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Hints EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHints(Hint hint)
        {
            base.AddObject("Hints", hint);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HintsToUsers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHintsToUsers(HintsToUser hintsToUser)
        {
            base.AddObject("HintsToUsers", hintsToUser);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ApiKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApiKeys(ApiKey apiKey)
        {
            base.AddObject("ApiKeys", apiKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserPresences EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserPresences(UserPresence userPresence)
        {
            base.AddObject("UserPresences", userPresence);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Pages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPages(Page page)
        {
            base.AddObject("Pages", page);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetEventStatsPerMonth_Result> GetEventStatsPerMonth(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetEventStatsPerMonth_Result>("GetEventStatsPerMonth", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<GetNewsletterStatsRow> GetNewsletterStats()
        {
            return base.ExecuteFunction<GetNewsletterStatsRow>("GetNewsletterStats");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetNewsletterStatsRow> GetNetworksNewsletterStats(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("NetworkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("NetworkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetNewsletterStatsRow>("GetNetworksNewsletterStats", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetUsersConversations_Result> GetUsersConversations(Nullable<int> userId, Nullable<int> networkId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetUsersConversations_Result>("GetUsersConversations", userIdParameter, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="myUserId">No Metadata Documentation available.</param>
        /// <param name="otherUserId">No Metadata Documentation available.</param>
        /// <param name="messageId">No Metadata Documentation available.</param>
        public int MarkMessagesReadUntil(Nullable<int> myUserId, Nullable<int> otherUserId, Nullable<int> messageId)
        {
            ObjectParameter myUserIdParameter;
            if (myUserId.HasValue)
            {
                myUserIdParameter = new ObjectParameter("myUserId", myUserId);
            }
            else
            {
                myUserIdParameter = new ObjectParameter("myUserId", typeof(int));
            }
    
            ObjectParameter otherUserIdParameter;
            if (otherUserId.HasValue)
            {
                otherUserIdParameter = new ObjectParameter("otherUserId", otherUserId);
            }
            else
            {
                otherUserIdParameter = new ObjectParameter("otherUserId", typeof(int));
            }
    
            ObjectParameter messageIdParameter;
            if (messageId.HasValue)
            {
                messageIdParameter = new ObjectParameter("messageId", messageId);
            }
            else
            {
                messageIdParameter = new ObjectParameter("messageId", typeof(int));
            }
    
            return base.ExecuteFunction("MarkMessagesReadUntil", myUserIdParameter, otherUserIdParameter, messageIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="ids">No Metadata Documentation available.</param>
        public int MarkActivitiesAsReadByIds(string ids)
        {
            ObjectParameter idsParameter;
            if (ids != null)
            {
                idsParameter = new ObjectParameter("ids", ids);
            }
            else
            {
                idsParameter = new ObjectParameter("ids", typeof(string));
            }
    
            return base.ExecuteFunction("MarkActivitiesAsReadByIds", idsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="importedIdExpression">No Metadata Documentation available.</param>
        public ObjectResult<GetTimelineItemIdsByImportedIdExpression_Result> GetTimelineItemIdsByImportedIdExpression(Nullable<int> networkId, string importedIdExpression)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter importedIdExpressionParameter;
            if (importedIdExpression != null)
            {
                importedIdExpressionParameter = new ObjectParameter("importedIdExpression", importedIdExpression);
            }
            else
            {
                importedIdExpressionParameter = new ObjectParameter("importedIdExpression", typeof(string));
            }
    
            return base.ExecuteFunction<GetTimelineItemIdsByImportedIdExpression_Result>("GetTimelineItemIdsByImportedIdExpression", networkIdParameter, importedIdExpressionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="importedIdExpression">No Metadata Documentation available.</param>
        public ObjectResult<GetTimelineCommentIdsByImportedIdExpression_Result> GetTimelineCommentIdsByImportedIdExpression(Nullable<int> networkId, string importedIdExpression)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter importedIdExpressionParameter;
            if (importedIdExpression != null)
            {
                importedIdExpressionParameter = new ObjectParameter("importedIdExpression", importedIdExpression);
            }
            else
            {
                importedIdExpressionParameter = new ObjectParameter("importedIdExpression", typeof(string));
            }
    
            return base.ExecuteFunction<GetTimelineCommentIdsByImportedIdExpression_Result>("GetTimelineCommentIdsByImportedIdExpression", networkIdParameter, importedIdExpressionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetExportableListOfUsers_Result> GetExportableListOfUsers(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetExportableListOfUsers_Result>("GetExportableListOfUsers", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<CompanyCategory> GetCompanyCategoriesUsedInNetwork(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<CompanyCategory>("GetCompanyCategoriesUsedInNetwork", networkIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<CompanyCategory> GetCompanyCategoriesUsedInNetwork(Nullable<int> networkId, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<CompanyCategory>("GetCompanyCategoriesUsedInNetwork", mergeOption, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<Job> GetJobsUsedInNetwork(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<Job>("GetJobsUsedInNetwork", networkIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<Job> GetJobsUsedInNetwork(Nullable<int> networkId, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<Job>("GetJobsUsedInNetwork", mergeOption, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineItemsListId(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineItemsListId", networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="minId">No Metadata Documentation available.</param>
        /// <param name="maxId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetRangedTimelineItem(Nullable<int> minId, Nullable<int> maxId)
        {
            ObjectParameter minIdParameter;
            if (minId.HasValue)
            {
                minIdParameter = new ObjectParameter("minId", minId);
            }
            else
            {
                minIdParameter = new ObjectParameter("minId", typeof(int));
            }
    
            ObjectParameter maxIdParameter;
            if (maxId.HasValue)
            {
                maxIdParameter = new ObjectParameter("maxId", maxId);
            }
            else
            {
                maxIdParameter = new ObjectParameter("maxId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetRangedTimelineItem", minIdParameter, maxIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="minId">No Metadata Documentation available.</param>
        /// <param name="maxId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetRangedTimelineItem(Nullable<int> minId, Nullable<int> maxId, MergeOption mergeOption)
        {
            ObjectParameter minIdParameter;
            if (minId.HasValue)
            {
                minIdParameter = new ObjectParameter("minId", minId);
            }
            else
            {
                minIdParameter = new ObjectParameter("minId", typeof(int));
            }
    
            ObjectParameter maxIdParameter;
            if (maxId.HasValue)
            {
                maxIdParameter = new ObjectParameter("maxId", maxId);
            }
            else
            {
                maxIdParameter = new ObjectParameter("maxId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetRangedTimelineItem", mergeOption, minIdParameter, maxIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Nullable<int>> GetTimelineItemLikeCount()
        {
            return base.ExecuteFunction<Nullable<int>>("GetTimelineItemLikeCount");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="wallId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetWallItemById(Nullable<int> networkId, Nullable<int> wallId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter wallIdParameter;
            if (wallId.HasValue)
            {
                wallIdParameter = new ObjectParameter("wallId", wallId);
            }
            else
            {
                wallIdParameter = new ObjectParameter("wallId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetWallItemById", networkIdParameter, wallIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="wallId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetWallItemById(Nullable<int> networkId, Nullable<int> wallId, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter wallIdParameter;
            if (wallId.HasValue)
            {
                wallIdParameter = new ObjectParameter("wallId", wallId);
            }
            else
            {
                wallIdParameter = new ObjectParameter("wallId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetWallItemById", mergeOption, networkIdParameter, wallIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetLastFiveRegistrants(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetLastFiveRegistrants", networkIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetLastFiveRegistrants(Nullable<int> networkId, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetLastFiveRegistrants", mergeOption, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetCompaniesPublicationToValidate(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetCompaniesPublicationToValidate", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListPublicId(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListPublicId", networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdPublic(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdPublic", networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdCompaniesNews(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdCompaniesNews", networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="companyId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdCompany(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> companyId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter companyIdParameter;
            if (companyId.HasValue)
            {
                companyIdParameter = new ObjectParameter("companyId", companyId);
            }
            else
            {
                companyIdParameter = new ObjectParameter("companyId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdCompany", networkIdParameter, dateMaxParameter, companyIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="companyId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdCompanyNetwork(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> companyId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter companyIdParameter;
            if (companyId.HasValue)
            {
                companyIdParameter = new ObjectParameter("companyId", companyId);
            }
            else
            {
                companyIdParameter = new ObjectParameter("companyId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdCompanyNetwork", networkIdParameter, dateMaxParameter, companyIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="eventId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdEvent(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> eventId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter eventIdParameter;
            if (eventId.HasValue)
            {
                eventIdParameter = new ObjectParameter("eventId", eventId);
            }
            else
            {
                eventIdParameter = new ObjectParameter("eventId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdEvent", networkIdParameter, dateMaxParameter, eventIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="companyId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdExternalCompany(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> companyId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter companyIdParameter;
            if (companyId.HasValue)
            {
                companyIdParameter = new ObjectParameter("companyId", companyId);
            }
            else
            {
                companyIdParameter = new ObjectParameter("companyId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdExternalCompany", networkIdParameter, dateMaxParameter, companyIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="groupId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdGroup(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> groupId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter groupIdParameter;
            if (groupId.HasValue)
            {
                groupIdParameter = new ObjectParameter("groupId", groupId);
            }
            else
            {
                groupIdParameter = new ObjectParameter("groupId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdGroup", networkIdParameter, dateMaxParameter, groupIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetTimelineListIdPeopleNews(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetTimelineListIdPeopleNews", networkIdParameter, dateMaxParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItem> GetTimelineListIdPeopleNews(Nullable<int> networkId, Nullable<System.DateTime> dateMax, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<TimelineItem>("GetTimelineListIdPeopleNews", mergeOption, networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdPlace(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> placeId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdPlace", networkIdParameter, dateMaxParameter, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdPrivate(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> userId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdPrivate", networkIdParameter, dateMaxParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="isContact">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdProfile(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> userId, Nullable<int> isContact)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter isContactParameter;
            if (isContact.HasValue)
            {
                isContactParameter = new ObjectParameter("isContact", isContact);
            }
            else
            {
                isContactParameter = new ObjectParameter("isContact", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdProfile", networkIdParameter, dateMaxParameter, userIdParameter, isContactParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdProject(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> projectId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("projectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("projectId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdProject", networkIdParameter, dateMaxParameter, projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="teamId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdTeam(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> teamId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter teamIdParameter;
            if (teamId.HasValue)
            {
                teamIdParameter = new ObjectParameter("teamId", teamId);
            }
            else
            {
                teamIdParameter = new ObjectParameter("teamId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdTeam", networkIdParameter, dateMaxParameter, teamIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdExternalCompanies(Nullable<int> networkId, Nullable<System.DateTime> dateMax)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdExternalCompanies", networkIdParameter, dateMaxParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="skillId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdTopic(Nullable<int> networkId, Nullable<System.DateTime> dateMax, Nullable<int> skillId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter skillIdParameter;
            if (skillId.HasValue)
            {
                skillIdParameter = new ObjectParameter("skillId", skillId);
            }
            else
            {
                skillIdParameter = new ObjectParameter("skillId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdTopic", networkIdParameter, dateMaxParameter, skillIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        /// <param name="dateMax">No Metadata Documentation available.</param>
        /// <param name="content">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetTimelineListIdByContent(Nullable<int> networkId, Nullable<System.DateTime> dateMax, string content)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            ObjectParameter dateMaxParameter;
            if (dateMax.HasValue)
            {
                dateMaxParameter = new ObjectParameter("dateMax", dateMax);
            }
            else
            {
                dateMaxParameter = new ObjectParameter("dateMax", typeof(System.DateTime));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("content", typeof(string));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetTimelineListIdByContent", networkIdParameter, dateMaxParameter, contentParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="applicationName">No Metadata Documentation available.</param>
        /// <param name="userName">No Metadata Documentation available.</param>
        /// <param name="currentTimeUtc">No Metadata Documentation available.</param>
        public int aspnet_Membership_LockUser(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            ObjectParameter applicationNameParameter;
            if (applicationName != null)
            {
                applicationNameParameter = new ObjectParameter("ApplicationName", applicationName);
            }
            else
            {
                applicationNameParameter = new ObjectParameter("ApplicationName", typeof(string));
            }
    
            ObjectParameter userNameParameter;
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("UserName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("UserName", typeof(string));
            }
    
            ObjectParameter currentTimeUtcParameter;
            if (currentTimeUtc.HasValue)
            {
                currentTimeUtcParameter = new ObjectParameter("CurrentTimeUtc", currentTimeUtc);
            }
            else
            {
                currentTimeUtcParameter = new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction("aspnet_Membership_LockUser", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetMembershipLockedOutUserIds(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetMembershipLockedOutUserIds", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="groupId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GroupMember> GetActualGroupMembers(Nullable<int> groupId, Nullable<int> userId, Nullable<int> networkId)
        {
            ObjectParameter groupIdParameter;
            if (groupId.HasValue)
            {
                groupIdParameter = new ObjectParameter("groupId", groupId);
            }
            else
            {
                groupIdParameter = new ObjectParameter("groupId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GroupMember>("GetActualGroupMembers", groupIdParameter, userIdParameter, networkIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="groupId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GroupMember> GetActualGroupMembers(Nullable<int> groupId, Nullable<int> userId, Nullable<int> networkId, MergeOption mergeOption)
        {
            ObjectParameter groupIdParameter;
            if (groupId.HasValue)
            {
                groupIdParameter = new ObjectParameter("groupId", groupId);
            }
            else
            {
                groupIdParameter = new ObjectParameter("groupId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GroupMember>("GetActualGroupMembers", mergeOption, groupIdParameter, userIdParameter, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="groupId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        public ObjectResult<GroupMember> GetActualGroupMembersByStatus(Nullable<int> groupId, Nullable<int> userId, Nullable<int> status)
        {
            ObjectParameter groupIdParameter;
            if (groupId.HasValue)
            {
                groupIdParameter = new ObjectParameter("groupId", groupId);
            }
            else
            {
                groupIdParameter = new ObjectParameter("groupId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter statusParameter;
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(int));
            }
    
            return base.ExecuteFunction<GroupMember>("GetActualGroupMembersByStatus", groupIdParameter, userIdParameter, statusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="groupId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        public ObjectResult<GroupMember> GetActualGroupMembersByStatus(Nullable<int> groupId, Nullable<int> userId, Nullable<int> status, MergeOption mergeOption)
        {
            ObjectParameter groupIdParameter;
            if (groupId.HasValue)
            {
                groupIdParameter = new ObjectParameter("groupId", groupId);
            }
            else
            {
                groupIdParameter = new ObjectParameter("groupId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter statusParameter;
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(int));
            }
    
            return base.ExecuteFunction<GroupMember>("GetActualGroupMembersByStatus", mergeOption, groupIdParameter, userIdParameter, statusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dateFromUtc">No Metadata Documentation available.</param>
        /// <param name="dateToUtc">No Metadata Documentation available.</param>
        public ObjectResult<GetEmailSendStatsByHour_Result> GetEmailSendStatsByHour(Nullable<System.DateTime> dateFromUtc, Nullable<System.DateTime> dateToUtc)
        {
            ObjectParameter dateFromUtcParameter;
            if (dateFromUtc.HasValue)
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", dateFromUtc);
            }
            else
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", typeof(System.DateTime));
            }
    
            ObjectParameter dateToUtcParameter;
            if (dateToUtc.HasValue)
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", dateToUtc);
            }
            else
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<GetEmailSendStatsByHour_Result>("GetEmailSendStatsByHour", dateFromUtcParameter, dateToUtcParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dateFromUtc">No Metadata Documentation available.</param>
        /// <param name="dateToUtc">No Metadata Documentation available.</param>
        public ObjectResult<GetEmailSendStatsByMinute_Result> GetEmailSendStatsByMinute(Nullable<System.DateTime> dateFromUtc, Nullable<System.DateTime> dateToUtc)
        {
            ObjectParameter dateFromUtcParameter;
            if (dateFromUtc.HasValue)
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", dateFromUtc);
            }
            else
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", typeof(System.DateTime));
            }
    
            ObjectParameter dateToUtcParameter;
            if (dateToUtc.HasValue)
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", dateToUtc);
            }
            else
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<GetEmailSendStatsByMinute_Result>("GetEmailSendStatsByMinute", dateFromUtcParameter, dateToUtcParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dateFromUtc">No Metadata Documentation available.</param>
        /// <param name="dateToUtc">No Metadata Documentation available.</param>
        public ObjectResult<GetEmailSendStatsByHour_Result> GetEmailSendStatsByDay(Nullable<System.DateTime> dateFromUtc, Nullable<System.DateTime> dateToUtc)
        {
            ObjectParameter dateFromUtcParameter;
            if (dateFromUtc.HasValue)
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", dateFromUtc);
            }
            else
            {
                dateFromUtcParameter = new ObjectParameter("dateFromUtc", typeof(System.DateTime));
            }
    
            ObjectParameter dateToUtcParameter;
            if (dateToUtc.HasValue)
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", dateToUtc);
            }
            else
            {
                dateToUtcParameter = new ObjectParameter("dateToUtc", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction<GetEmailSendStatsByHour_Result>("GetEmailSendStatsByDay", dateFromUtcParameter, dateToUtcParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItemSkill> GetTimelineSkillsListIdForCount(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItemSkill>("GetTimelineSkillsListIdForCount", networkIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<TimelineItemSkill> GetTimelineSkillsListIdForCount(Nullable<int> networkId, MergeOption mergeOption)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<TimelineItemSkill>("GetTimelineSkillsListIdForCount", mergeOption, networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> GetUsersContactIds(Nullable<int> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("GetUsersContactIds", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> CountCompleteUserProfiles(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("CountCompleteUserProfiles", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetCompaniesAccessLevelReport_Result> GetCompaniesAccessLevelReport(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetCompaniesAccessLevelReport_Result>("GetCompaniesAccessLevelReport", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="textId">No Metadata Documentation available.</param>
        public ObjectResult<TextValue> GetTextValueByTextId(Nullable<int> textId)
        {
            ObjectParameter textIdParameter;
            if (textId.HasValue)
            {
                textIdParameter = new ObjectParameter("textId", textId);
            }
            else
            {
                textIdParameter = new ObjectParameter("textId", typeof(int));
            }
    
            return base.ExecuteFunction<TextValue>("GetTextValueByTextId", textIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="textId">No Metadata Documentation available.</param>
        /// <param name="culture">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="value">No Metadata Documentation available.</param>
        /// <param name="date">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<int>> SetTextValue(Nullable<int> textId, string culture, string title, string value, Nullable<System.DateTime> date, Nullable<int> userId)
        {
            ObjectParameter textIdParameter;
            if (textId.HasValue)
            {
                textIdParameter = new ObjectParameter("textId", textId);
            }
            else
            {
                textIdParameter = new ObjectParameter("textId", typeof(int));
            }
    
            ObjectParameter cultureParameter;
            if (culture != null)
            {
                cultureParameter = new ObjectParameter("culture", culture);
            }
            else
            {
                cultureParameter = new ObjectParameter("culture", typeof(string));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("title", typeof(string));
            }
    
            ObjectParameter valueParameter;
            if (value != null)
            {
                valueParameter = new ObjectParameter("value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("value", typeof(string));
            }
    
            ObjectParameter dateParameter;
            if (date.HasValue)
            {
                dateParameter = new ObjectParameter("date", date);
            }
            else
            {
                dateParameter = new ObjectParameter("date", typeof(System.DateTime));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            return base.ExecuteFunction<Nullable<int>>("SetTextValue", textIdParameter, cultureParameter, titleParameter, valueParameter, dateParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public int DeleteNotSubmittedApplyRequests(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction("DeleteNotSubmittedApplyRequests", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetTopSkills_Result> GetTopSkills(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("networkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("networkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetTopSkills_Result>("GetTopSkills", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="day">No Metadata Documentation available.</param>
        /// <param name="time">No Metadata Documentation available.</param>
        public int UpdateUserPresence(Nullable<int> userId, Nullable<System.DateTime> day, Nullable<System.DateTime> time)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter dayParameter;
            if (day.HasValue)
            {
                dayParameter = new ObjectParameter("Day", day);
            }
            else
            {
                dayParameter = new ObjectParameter("Day", typeof(System.DateTime));
            }
    
            ObjectParameter timeParameter;
            if (time.HasValue)
            {
                timeParameter = new ObjectParameter("Time", time);
            }
            else
            {
                timeParameter = new ObjectParameter("Time", typeof(System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateUserPresence", userIdParameter, dayParameter, timeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="networkId">No Metadata Documentation available.</param>
        public ObjectResult<GetUserPresenceStats_Result> GetUserPresenceStats(Nullable<int> networkId)
        {
            ObjectParameter networkIdParameter;
            if (networkId.HasValue)
            {
                networkIdParameter = new ObjectParameter("NetworkId", networkId);
            }
            else
            {
                networkIdParameter = new ObjectParameter("NetworkId", typeof(int));
            }
    
            return base.ExecuteFunction<GetUserPresenceStats_Result>("GetUserPresenceStats", networkIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="deleteJobId">No Metadata Documentation available.</param>
        /// <param name="targetJobId">No Metadata Documentation available.</param>
        public ObjectResult<DeleteJob_Result> DeleteJob(Nullable<int> deleteJobId, Nullable<int> targetJobId)
        {
            ObjectParameter deleteJobIdParameter;
            if (deleteJobId.HasValue)
            {
                deleteJobIdParameter = new ObjectParameter("deleteJobId", deleteJobId);
            }
            else
            {
                deleteJobIdParameter = new ObjectParameter("deleteJobId", typeof(int));
            }
    
            ObjectParameter targetJobIdParameter;
            if (targetJobId.HasValue)
            {
                targetJobIdParameter = new ObjectParameter("targetJobId", targetJobId);
            }
            else
            {
                targetJobIdParameter = new ObjectParameter("targetJobId", typeof(int));
            }
    
            return base.ExecuteFunction<DeleteJob_Result>("DeleteJob", deleteJobIdParameter, targetJobIdParameter);
        }

        #endregion

    }
    

    #endregion

    
}
