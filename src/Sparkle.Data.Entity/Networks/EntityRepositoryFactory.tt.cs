 //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// solutionPath:            <solution>
// projectPath:             <solution>\Sparkle.Data.Entity
// projectName:             Sparkle.Data.Entity

// codegen: getting list of interfaces from compiled assembly
// codegen: file found <solution>\Sparkle.Data.Entity\bin\debug\Sparkle.Data.Entity.dll
// codegen: loading assembly and its dependencies: Sparkle.Infrastructure, Sparkle.Entities, Sparkle.Data, 
// codegen: assembly loaded with 207 public types

namespace Sparkle.Data.Entity.Networks
{
    using System;
	using Sparkle.Data.Networks;

// codegen: writing factory class
    
    public partial class EntityRepositoryFactory : IRepositoryFactory
    {
        IAchievementsRepository IRepositoryFactory.Achievements {
            get { return this.disposable.Add(new AchievementsRepository(this.context, this.factory)); }
        }
        IAchievementsCompaniesRepository IRepositoryFactory.AchievementsCompanies {
            get { return this.disposable.Add(new AchievementsCompaniesRepository(this.context, this.factory)); }
        }
        IAchievementsUsersRepository IRepositoryFactory.AchievementsUsers {
            get { return this.disposable.Add(new AchievementsUsersRepository(this.context, this.factory)); }
        }
        IActivitiesRepository IRepositoryFactory.Activities {
            get { return this.disposable.Add(new ActivitiesRepository(this.context, this.factory)); }
        }
        IAdsRepository IRepositoryFactory.Ads {
            get { return this.disposable.Add(new AdsRepository(this.context, this.factory)); }
        }
        IAdsCategoriesRepository IRepositoryFactory.AdsCategories {
            get { return this.disposable.Add(new AdsCategoriesRepository(this.context, this.factory)); }
        }
        IAdTagsRepository IRepositoryFactory.AdTags {
            get { return this.disposable.Add(new AdTagsRepository(this.context, this.factory)); }
        }
        IAlbumsRepository IRepositoryFactory.Albums {
            get { return this.disposable.Add(new AlbumsRepository(this.context, this.factory)); }
        }
        IApiKeysRepository IRepositoryFactory.ApiKeys {
            get { return this.disposable.Add(new ApiKeysRepository(this.context, this.factory)); }
        }
        IApplyRequestsRepository IRepositoryFactory.ApplyRequests {
            get { return this.disposable.Add(new ApplyRequestsRepository(this.context, this.factory)); }
        }
        IBuildingRepository IRepositoryFactory.Building {
            get { return this.disposable.Add(new BuildingRepository(this.context, this.factory)); }
        }
        ICareerOpportunitiesRepository IRepositoryFactory.CareerOpportunities {
            get { return this.disposable.Add(new CareerOpportunitiesRepository(this.context, this.factory)); }
        }
        IClubsRepository IRepositoryFactory.Clubs {
            get { return this.disposable.Add(new ClubsRepository(this.context, this.factory)); }
        }
        ICompanyRepository IRepositoryFactory.Companies {
            get { return this.disposable.Add(new CompaniesRepository(this.context, this.factory)); }
        }
        ICompaniesSkillsRepository IRepositoryFactory.CompaniesSkills {
            get { return this.disposable.Add(new CompaniesSkillsRepository(this.context, this.factory)); }
        }
        ICompaniesVisitsRepository IRepositoryFactory.CompaniesVisits {
            get { return this.disposable.Add(new CompaniesVisitsRepository(this.context, this.factory)); }
        }
        ICompanyAdminRepository IRepositoryFactory.CompanyAdmin {
            get { return this.disposable.Add(new CompanyAdminRepository(this.context, this.factory)); }
        }
        ICompanyCategoriesRepository IRepositoryFactory.CompanyCategories {
            get { return this.disposable.Add(new CompanyCategoriesRepository(this.context, this.factory)); }
        }
        ICompanyContactsRepository IRepositoryFactory.CompanyContacts {
            get { return this.disposable.Add(new CompanyContactsRepository(this.context, this.factory)); }
        }
        ICompanyPlacesRepository IRepositoryFactory.CompanyPlaces {
            get { return this.disposable.Add(new CompanyPlacesRepository(this.context, this.factory)); }
        }
        ICompanyProfileFieldsRepository IRepositoryFactory.CompanyProfileFields {
            get { return this.disposable.Add(new CompanyProfileFieldsRepository(this.context, this.factory)); }
        }
        ICompanyRelationshipsRepository IRepositoryFactory.CompanyRelationships {
            get { return this.disposable.Add(new CompanyRelationshipsRepository(this.context, this.factory)); }
        }
        ICompanyRelationshipTypesRepository IRepositoryFactory.CompanyRelationshipTypes {
            get { return this.disposable.Add(new CompanyRelationshipTypesRepository(this.context, this.factory)); }
        }
        ICompanyRequestMessagesRepository IRepositoryFactory.CompanyRequestMessages {
            get { return this.disposable.Add(new CompanyRequestMessagesRepository(this.context, this.factory)); }
        }
        ICompanyRequestsRepository IRepositoryFactory.CompanyRequests {
            get { return this.disposable.Add(new CompanyRequestsRepository(this.context, this.factory)); }
        }
        ICompanyTagsRepository IRepositoryFactory.CompanyTags {
            get { return this.disposable.Add(new CompanyTagsRepository(this.context, this.factory)); }
        }
        ICreateNetworkRequestsRepository IRepositoryFactory.CreateNetworkRequests {
            get { return this.disposable.Add(new CreateNetworkRequestsRepository(this.context, this.factory)); }
        }
        IDeviceConfigurationRepository IRepositoryFactory.DeviceConfiguration {
            get { return this.disposable.Add(new DeviceConfigurationRepository(this.context, this.factory)); }
        }
        IDevicePlanningRepository IRepositoryFactory.DevicePlanning {
            get { return this.disposable.Add(new DevicePlanningRepository(this.context, this.factory)); }
        }
        IDevicesRepository IRepositoryFactory.Devices {
            get { return this.disposable.Add(new DevicesRepository(this.context, this.factory)); }
        }
        IEmailMessagesRepository IRepositoryFactory.EmailMessages {
            get { return this.disposable.Add(new EmailMessagesRepository(this.context, this.factory)); }
        }
        IEventPublicMembersRepository IRepositoryFactory.EventPublicMembers {
            get { return this.disposable.Add(new EventPublicMembersRepository(this.context, this.factory)); }
        }
        IEventsRepository IRepositoryFactory.Events {
            get { return this.disposable.Add(new EventsRepository(this.context, this.factory)); }
        }
        IEventsCategoriesRepository IRepositoryFactory.EventsCategories {
            get { return this.disposable.Add(new EventsCategoriesRepository(this.context, this.factory)); }
        }
        IEventsMembersRepository IRepositoryFactory.EventsMembers {
            get { return this.disposable.Add(new EventsMembersRepository(this.context, this.factory)); }
        }
        IExchangeMaterialsRepository IRepositoryFactory.ExchangeMaterials {
            get { return this.disposable.Add(new ExchangeMaterialsRepository(this.context, this.factory)); }
        }
        IExchangeSkillsRepository IRepositoryFactory.ExchangeSkills {
            get { return this.disposable.Add(new ExchangeSkillsRepository(this.context, this.factory)); }
        }
        IExchangeSurfacesRepository IRepositoryFactory.ExchangeSurfaces {
            get { return this.disposable.Add(new ExchangeSurfacesRepository(this.context, this.factory)); }
        }
        IFriendsRepository IRepositoryFactory.Friends {
            get { return this.disposable.Add(new FriendsRepository(this.context, this.factory)); }
        }
        IGroupsRepository IRepositoryFactory.Groups {
            get { return this.disposable.Add(new GroupsRepository(this.context, this.factory)); }
        }
        IGroupsCategoriesRepository IRepositoryFactory.GroupsCategories {
            get { return this.disposable.Add(new GroupsCategoriesRepository(this.context, this.factory)); }
        }
        IGroupsInterestsRepository IRepositoryFactory.GroupsInterests {
            get { return this.disposable.Add(new GroupsInterestsRepository(this.context, this.factory)); }
        }
        IGroupsMembersRepository IRepositoryFactory.GroupsMembers {
            get { return this.disposable.Add(new GroupsMembersRepository(this.context, this.factory)); }
        }
        IGroupsRecreationsRepository IRepositoryFactory.GroupsRecreations {
            get { return this.disposable.Add(new GroupsRecreationsRepository(this.context, this.factory)); }
        }
        IGroupsSkillsRepository IRepositoryFactory.GroupsSkills {
            get { return this.disposable.Add(new GroupsSkillsRepository(this.context, this.factory)); }
        }
        IGroupTagsRepository IRepositoryFactory.GroupTags {
            get { return this.disposable.Add(new GroupTagsRepository(this.context, this.factory)); }
        }
        IHintsRepository IRepositoryFactory.Hints {
            get { return this.disposable.Add(new HintsRepository(this.context, this.factory)); }
        }
        IHintsToUsersRepository IRepositoryFactory.HintsToUsers {
            get { return this.disposable.Add(new HintsToUsersRepository(this.context, this.factory)); }
        }
        IInboundEmailMessageRepository IRepositoryFactory.InboundEmailMessage {
            get { return this.disposable.Add(new InboundEmailMessageRepository(this.context, this.factory)); }
        }
        IInformationNotesRepository IRepositoryFactory.InformationNotes {
            get { return this.disposable.Add(new InformationNotesRepository(this.context, this.factory)); }
        }
        IInterestsRepository IRepositoryFactory.Interests {
            get { return this.disposable.Add(new InterestsRepository(this.context, this.factory)); }
        }
        IInvitedRepository IRepositoryFactory.Invited {
            get { return this.disposable.Add(new InvitedRepository(this.context, this.factory)); }
        }
        IJobRepository IRepositoryFactory.Job {
            get { return this.disposable.Add(new JobRepository(this.context, this.factory)); }
        }
        ILinksRepository IRepositoryFactory.Links {
            get { return this.disposable.Add(new LinksRepository(this.context, this.factory)); }
        }
        ILiveRepository IRepositoryFactory.Live {
            get { return this.disposable.Add(new LiveRepository(this.context, this.factory)); }
        }
        ILostItemsRepository IRepositoryFactory.LostItems {
            get { return this.disposable.Add(new LostItemsRepository(this.context, this.factory)); }
        }
        IMembershipRepository IRepositoryFactory.Membership {
            get { return this.disposable.Add(new MembershipRepository(this.context, this.factory)); }
        }
        IMenusRepository IRepositoryFactory.Menus {
            get { return this.disposable.Add(new MenusRepository(this.context, this.factory)); }
        }
        IMenusPlanningRepository IRepositoryFactory.MenusPlanning {
            get { return this.disposable.Add(new MenusPlanningRepository(this.context, this.factory)); }
        }
        INetworksRepository IRepositoryFactory.Networks {
            get { return this.disposable.Add(new NetworksRepository(this.context, this.factory)); }
        }
        INetworkTypesRepository IRepositoryFactory.NetworkTypes {
            get { return this.disposable.Add(new NetworkTypesRepository(this.context, this.factory)); }
        }
        INotificationsRepository IRepositoryFactory.Notifications {
            get { return this.disposable.Add(new NotificationsRepository(this.context, this.factory)); }
        }
        INumbersRepository IRepositoryFactory.Numbers {
            get { return this.disposable.Add(new NumbersRepository(this.context, this.factory)); }
        }
        IPagesRepository IRepositoryFactory.Pages {
            get { return this.disposable.Add(new PagesRepository(this.context, this.factory)); }
        }
        IPartnerResourceProfileFieldsRepository IRepositoryFactory.PartnerResourceProfileFields {
            get { return this.disposable.Add(new PartnerResourceProfileFieldsRepository(this.context, this.factory)); }
        }
        IPartnerResourcesRepository IRepositoryFactory.PartnerResources {
            get { return this.disposable.Add(new PartnerResourcesRepository(this.context, this.factory)); }
        }
        IPartnerResourceTagsRepository IRepositoryFactory.PartnerResourceTags {
            get { return this.disposable.Add(new PartnerResourceTagsRepository(this.context, this.factory)); }
        }
        IPeopleRepository IRepositoryFactory.People {
            get { return this.disposable.Add(new PeopleRepository(this.context, this.factory)); }
        }
        IPeoplesInterestsRepository IRepositoryFactory.PeoplesInterests {
            get { return this.disposable.Add(new PeoplesInterestsRepository(this.context, this.factory)); }
        }
        IPeoplesRecreationsRepository IRepositoryFactory.PeoplesRecreations {
            get { return this.disposable.Add(new PeoplesRecreationsRepository(this.context, this.factory)); }
        }
        IPeoplesSkillsRepository IRepositoryFactory.PeoplesSkills {
            get { return this.disposable.Add(new PeoplesSkillsRepository(this.context, this.factory)); }
        }
        IPeopleVisitsRepository IRepositoryFactory.PeopleVisits {
            get { return this.disposable.Add(new PeopleVisitsRepository(this.context, this.factory)); }
        }
        IPicturesRepository IRepositoryFactory.Pictures {
            get { return this.disposable.Add(new PicturesRepository(this.context, this.factory)); }
        }
        IPlaceProfileFieldsRepository IRepositoryFactory.PlaceProfileFields {
            get { return this.disposable.Add(new PlaceProfileFieldsRepository(this.context, this.factory)); }
        }
        IPlacesRepository IRepositoryFactory.Places {
            get { return this.disposable.Add(new PlacesRepository(this.context, this.factory)); }
        }
        IPlacesCategoriesRepository IRepositoryFactory.PlacesCategories {
            get { return this.disposable.Add(new PlacesCategoriesRepository(this.context, this.factory)); }
        }
        IPlacesHistoryRepository IRepositoryFactory.PlacesHistory {
            get { return this.disposable.Add(new PlacesHistoryRepository(this.context, this.factory)); }
        }
        IPollsRepository IRepositoryFactory.Polls {
            get { return this.disposable.Add(new PollsRepository(this.context, this.factory)); }
        }
        IPollsAnswersRepository IRepositoryFactory.PollsAnswers {
            get { return this.disposable.Add(new PollsAnswersRepository(this.context, this.factory)); }
        }
        IPollsChoicesRepository IRepositoryFactory.PollsChoices {
            get { return this.disposable.Add(new PollsChoicesRepository(this.context, this.factory)); }
        }
        IPrivateMessageRepository IRepositoryFactory.PrivateMessage {
            get { return this.disposable.Add(new PrivateMessageRepository(this.context, this.factory)); }
        }
        IProfileFieldsRepository IRepositoryFactory.ProfileFields {
            get { return this.disposable.Add(new ProfileFieldsRepository(this.context, this.factory)); }
        }
        IProfileFieldsAvailiableValuesRepository IRepositoryFactory.ProfileFieldsAvailiableValues {
            get { return this.disposable.Add(new ProfileFieldsAvailiableValuesRepository(this.context, this.factory)); }
        }
        IProjectsRepository IRepositoryFactory.Projects {
            get { return this.disposable.Add(new ProjectsRepository(this.context, this.factory)); }
        }
        IProjectsMembersRepository IRepositoryFactory.ProjectsMembers {
            get { return this.disposable.Add(new ProjectsMembersRepository(this.context, this.factory)); }
        }
        IRecreationsRepository IRepositoryFactory.Recreations {
            get { return this.disposable.Add(new RecreationsRepository(this.context, this.factory)); }
        }
        IRegisterRequestsRepository IRepositoryFactory.RegisterRequests {
            get { return this.disposable.Add(new RegisterRequestsRepository(this.context, this.factory)); }
        }
        IRelationshipRepository IRepositoryFactory.Relationship {
            get { return this.disposable.Add(new RelationshipRepository(this.context, this.factory)); }
        }
        IRequestsForProposalRepository IRepositoryFactory.RequestsForProposal {
            get { return this.disposable.Add(new RequestsForProposalRepository(this.context, this.factory)); }
        }
        IResumesRepository IRepositoryFactory.Resumes {
            get { return this.disposable.Add(new ResumesRepository(this.context, this.factory)); }
        }
        IResumesSkillsRepository IRepositoryFactory.ResumesSkills {
            get { return this.disposable.Add(new ResumesSkillsRepository(this.context, this.factory)); }
        }
        ISeekFriendsRepository IRepositoryFactory.SeekFriends {
            get { return this.disposable.Add(new SeekFriendsRepository(this.context, this.factory)); }
        }
        ISkillsRepository IRepositoryFactory.Skills {
            get { return this.disposable.Add(new SkillsRepository(this.context, this.factory)); }
        }
        ISocialNetworkCompanySubscriptionsRepository IRepositoryFactory.SocialNetworkCompanySubscriptions {
            get { return this.disposable.Add(new SocialNetworkCompanySubscriptionsRepository(this.context, this.factory)); }
        }
        ISocialNetworkConnectionsRepository IRepositoryFactory.SocialNetworkConnections {
            get { return this.disposable.Add(new SocialNetworkConnectionsRepository(this.context, this.factory)); }
        }
        ISocialNetworkStatesRepository IRepositoryFactory.SocialNetworkStates {
            get { return this.disposable.Add(new SocialNetworkStatesRepository(this.context, this.factory)); }
        }
        ISocialNetworkUserSubscriptionsRepository IRepositoryFactory.SocialNetworkUserSubscriptions {
            get { return this.disposable.Add(new SocialNetworkUserSubscriptionsRepository(this.context, this.factory)); }
        }
        IStatsCounterHitsRepository IRepositoryFactory.StatsCounterHits {
            get { return this.disposable.Add(new StatsCounterHitsRepository(this.context, this.factory)); }
        }
        IStatsCountersRepository IRepositoryFactory.StatsCounters {
            get { return this.disposable.Add(new StatsCountersRepository(this.context, this.factory)); }
        }
        IStripeTransactionsRepository IRepositoryFactory.StripeTransactions {
            get { return this.disposable.Add(new StripeTransactionsRepository(this.context, this.factory)); }
        }
        ISubscriptionNotificationsRepository IRepositoryFactory.SubscriptionNotifications {
            get { return this.disposable.Add(new SubscriptionNotificationsRepository(this.context, this.factory)); }
        }
        ISubscriptionsRepository IRepositoryFactory.Subscriptions {
            get { return this.disposable.Add(new SubscriptionsRepository(this.context, this.factory)); }
        }
        ISubscriptionTemplatesRepository IRepositoryFactory.SubscriptionTemplates {
            get { return this.disposable.Add(new SubscriptionTemplatesRepository(this.context, this.factory)); }
        }
        ITagCategoriesRepository IRepositoryFactory.TagCategories {
            get { return this.disposable.Add(new TagCategoriesRepository(this.context, this.factory)); }
        }
        ITagDefinitionsRepository IRepositoryFactory.TagDefinitions {
            get { return this.disposable.Add(new TagDefinitionsRepository(this.context, this.factory)); }
        }
        ITeamsRepository IRepositoryFactory.Teams {
            get { return this.disposable.Add(new TeamsRepository(this.context, this.factory)); }
        }
        ITeamsMembersRepository IRepositoryFactory.TeamsMembers {
            get { return this.disposable.Add(new TeamsMembersRepository(this.context, this.factory)); }
        }
        ITextRepository IRepositoryFactory.Text {
            get { return this.disposable.Add(new TextRepository(this.context, this.factory)); }
        }
        ITimelineItemCommentLikesRepository IRepositoryFactory.TimelineItemCommentLikes {
            get { return this.disposable.Add(new TimelineItemCommentLikesRepository(this.context, this.factory)); }
        }
        ITimelineItemLikesRepository IRepositoryFactory.TimelineItemLikes {
            get { return this.disposable.Add(new TimelineItemLikesRepository(this.context, this.factory)); }
        }
        ITimelineItemSkillsRepository IRepositoryFactory.TimelineItemSkills {
            get { return this.disposable.Add(new TimelineItemSkillsRepository(this.context, this.factory)); }
        }
        ITimelineItemTagsRepository IRepositoryFactory.TimelineItemTags {
            get { return this.disposable.Add(new TimelineItemTagsRepository(this.context, this.factory)); }
        }
        ITouchCommunicationItemsRepository IRepositoryFactory.TouchCommunicationItems {
            get { return this.disposable.Add(new TouchCommunicationItemsRepository(this.context, this.factory)); }
        }
        ITouchCommunicationsRepository IRepositoryFactory.TouchCommunications {
            get { return this.disposable.Add(new TouchCommunicationsRepository(this.context, this.factory)); }
        }
        IUserActionKeysRepository IRepositoryFactory.UserActionKeys {
            get { return this.disposable.Add(new UserActionKeysRepository(this.context, this.factory)); }
        }
        IUserEmailChangeRequestRepository IRepositoryFactory.UserEmailChangeRequest {
            get { return this.disposable.Add(new UserEmailChangeRequestRepository(this.context, this.factory)); }
        }
        IUserPresencesRepository IRepositoryFactory.UserPresences {
            get { return this.disposable.Add(new UserPresencesRepository(this.context, this.factory)); }
        }
        IUserProfileFieldsRepository IRepositoryFactory.UserProfileFields {
            get { return this.disposable.Add(new UserProfileFieldsRepository(this.context, this.factory)); }
        }
        IUserSettingsRepository IRepositoryFactory.UserSettings {
            get { return this.disposable.Add(new UserSettingsRepository(this.context, this.factory)); }
        }
        IUserTagsRepository IRepositoryFactory.UserTags {
            get { return this.disposable.Add(new UserTagsRepository(this.context, this.factory)); }
        }
        IWallRepository IRepositoryFactory.Wall {
            get { return this.disposable.Add(new WallRepository(this.context, this.factory)); }
        }
        IWallCommentsRepository IRepositoryFactory.WallComments {
            get { return this.disposable.Add(new WallCommentsRepository(this.context, this.factory)); }
        }
    }
}

// codegen: ended
