<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".tt.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
//===================================
// Initialisation
//===================================

var projectPath = Path.GetDirectoryName(Path.GetDirectoryName(this.Host.TemplateFile));
var projectName = Path.GetFileName(projectPath);
//projectName = "Sparkle.Data";
var solutionPath =  Path.GetDirectoryName(projectPath);
#>
// solutionPath:            <#= solutionPath.Replace(solutionPath, "<solution>") #>
// projectPath:             <#= projectPath.Replace(solutionPath, "<solution>") #>
// projectName:             <#= projectName #>

<#

//===================================
// LOAD FROM ASSEMBLY
//===================================

var interfacesFromAssembly = new List<Repository>();
WriteLine("// codegen: getting list of interfaces from compiled assembly");
bool ok = true;
var assemblyDir = Path.Combine(projectPath, "..\\..\\Public\\Sparkle.Data", "bin", "debug");
var dependencies = new string[] { "Sparkle.Infrastructure", "Sparkle.Entities" };
var assemblyPath = Path.Combine(projectPath, "bin", "debug", "Sparkle.Data.Entity" + ".dll");
var displayAssemblyPath = assemblyPath.Replace(solutionPath, "<solution>");
if (!File.Exists(assemblyPath)) {
    ok = false;
    WriteLine("// codegen: ERROR: file not found " + displayAssemblyPath);
} else {
    WriteLine("// codegen: file found " + displayAssemblyPath);
}

Assembly ass = null;
Type repoAttr = null;
Type[] types = null;
Type[] types1 = null;
PropertyInfo repoAttrName = null;
if (ok) {
    try {
        Write("// codegen: loading assembly and its dependencies: ");
        foreach (var dep in dependencies) {
            try {
                var depAssemblyPath = Path.Combine(assemblyDir, dep + ".dll");
                //Assembly.LoadFrom(depAssemblyPath);
                Assembly.Load(File.ReadAllBytes(depAssemblyPath));
                Write(dep); Write(", ");
            } catch (Exception ex) {
                WriteLine("ERROR");
                WriteLine("// codegen: ERROR: failed to load dependant assembly " + dep);
            }
        }
        {
            Write("Sparkle.Data");
            var depAssemblyPath = Path.Combine(assemblyDir, "Sparkle.Data.dll");
            var preAss = Assembly.Load(File.ReadAllBytes(depAssemblyPath));
            repoAttr = preAss.GetType("Sparkle.Data.RepositoryAttribute");
            //repoAttr = Type.GetType("Sparkle.Data.RepositoryAttribute");
            repoAttrName = repoAttr.GetProperty("Name");
            if (repoAttr == null)
                throw new InvalidOperationException("Cannot find type Sparkle.Data.RepositoryAttribute");
            WriteLine(", ");
            types = preAss.GetExportedTypes();
            WriteLine("// codegen: assembly loaded with " + types.Length + " public types");
        }

        //Write(projectName);
        //WriteLine(string.Empty);
        //ass = Assembly.LoadFrom(assemblyPath);
        //ass = Assembly.Load(File.ReadAllBytes(assemblyPath));
        //types1 = ass.GetTypes();
        
    } catch (Exception ex) {
        ok = false;
        WriteLine("// codegen: ERROR: failed to load assembly");
        WriteLine(ex.ToString());
    }
}

if (ok) {
    try {
        foreach (Type type in types) {
            if (!type.IsInterface)
                continue;

            object[] attrs = type.GetCustomAttributes(repoAttr, false);
            foreach (object attr in attrs) {
                if (repoAttr.IsInstanceOfType(attr)) {
                    string iname = type.Name;
                    string name = (string)repoAttrName.GetValue(attr, null);
                    if (name == null)
                        name = iname.Substring(1, iname.IndexOf("Repository") - 1);
                    interfacesFromAssembly.Add(new Repository {
                        Interface = type.Name,
                        Name = name,
                    });
                } else {
                }
            }
        }



        //var ifaces = types.Where
        //WriteLine("// codegen: loading assembly");
    } catch (Exception ex) {
        ok = false;
        WriteLine("// codegen: failed to load assembly");
        WriteLine(ex.ToString());
    }
}

var interfaces = interfacesFromAssembly.OrderBy(x => x.Name).ToList();

#>

namespace Sparkle.Data.Entity.Networks
{
    using System;
	using Sparkle.Data.Networks;

// codegen: writing factory class
    
    public partial class EntityRepositoryFactory : IRepositoryFactory
    {
<#
foreach (var item in interfaces) {
#>
        <#= item.Interface #> IRepositoryFactory.<#= item.Name #> {
            get { return this.disposable.Add(new <#= item.Name #>Repository(this.context, this.factory)); }
        }
<#
}
#>
    }
}

// codegen: ended
<#+

public class Repository {
    public string Interface { get; set; }
    public string Name { get; set; }
}



#>