<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".tt.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
//===================================
// Initialisation
//===================================

var projectPath = Path.GetDirectoryName(this.Host.TemplateFile);
var projectName = Path.GetFileName(projectPath);
var solutionPath =  Path.GetDirectoryName(projectPath);
#>
// solutionPath:            <#= solutionPath.Replace(solutionPath, "<solution>") #>
// projectPath:             <#= projectPath.Replace(solutionPath, "<solution>") #>
// projectName:             <#= projectName #>

<#
var allFiles = Directory.GetFiles(projectPath, "*Service.cs");
var files = allFiles
    .Select(x => Path.GetFileNameWithoutExtension(x))
    .Where(x => x.StartsWith("I"))
    .OrderBy(x => x)
    .Select(x => new Item { Interface = x, Name =  x.Substring(1, x.IndexOf("Service") - 1)})
    .ToList();
files.Insert(0, new Item { Interface = "AppConfiguration", Name = "AppConfiguration", IsExtra = true });
files.Insert(0, new Item { Interface = "Application", Name = "Application", IsExtra = true });
files.Insert(0, new Item { Interface = "IRepositoryFactory", Name = "Repositories", IsExtra = true });
files.Insert(0, new Item { Interface = "IEmailTemplateProvider", Name = "EmailTemplateProvider", IsExtra = true });
//files.Insert(0, new Item { Interface = "ServiceIdentity", Name = "Identity", IsExtra = true });
files.Insert(0, new Item { Interface = "ILogger", Name = "Logger", IsExtra = true });
files.Insert(0, new Item { Interface = "Strings", Name = "Lang", IsExtra = true, IsGetter = true, });
files.Insert(0, new Item { Interface = "HostingEnvironment", Name = "HostingEnvironment", IsExtra = true });
files.RemoveAll(f => f.Name == "Cache");
var imax = files.Max(f => f.Interface.Length);
var nmax = files.Max(f => f.Name.Length);
#>

namespace Sparkle.Services.Networks
{
    using System;
    using Sparkle.Infrastructure;
    using Sparkle.Data.Networks;
    using Sparkle.UI;

    public partial interface IServiceFactory : IDisposable
    {
<#
bool wasExtra = false;
foreach (var item in files) {
	var axxrs = item.IsGetter | !item.IsExtra ? "get;" : "get; set;";
     if (item.IsExtra) {
        WriteLine(string.Format("\t\t{0,-"+imax+"} {1,-"+nmax+"} {{ {2} }}", item.Interface, item.Name, axxrs));
    }else{
        if (wasExtra)
    WriteLine(string.Empty);
        WriteLine(string.Format("\t\t{0,-"+imax+"} {1,-"+nmax+"} {{ {2} }}", item.Interface, item.Name, axxrs));
    }
    wasExtra = item.IsExtra;
}
#>
    }
}

namespace Sparkle.Services.Networks.Mocks
{
    using System;
    using Sparkle.Infrastructure;
    using Sparkle.Data.Networks;
    using Sparkle.Services;
    using Sparkle.Services.Networks;
    using Sparkle.UI;

    public partial class BasicServiceFactory
    {
<#
wasExtra = false;
foreach (var item in files) {
	var axxrs = "get; set;";
     if (item.IsExtra) {
     WriteLine(string.Format("\t\tpublic {0,-"+imax+"} {1,-"+nmax+"} {{ {2} }}", item.Interface, item.Name, axxrs));
    }else{
        if (wasExtra)
            WriteLine(string.Empty);
        WriteLine(string.Format("\t\tpublic {0,-"+imax+"} {1,-"+nmax+"} {{ {2} }}", item.Interface, item.Name, axxrs));
    }
    wasExtra = item.IsExtra;
}
#>
    }
}

<#+

public class Item {
    public string Interface { get; set; }    
    public string Name { get; set; }
    public bool IsExtra { get; set; }
    public bool IsGetter { get; set; }
}


#>