<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
//===================================
// Initialisation
//===================================

var projectPath = Path.GetDirectoryName(Path.GetDirectoryName(this.Host.TemplateFile));
var projectName = Path.GetFileName(projectPath);
var solutionPath =  Path.GetDirectoryName(projectPath);
#>
// solutionPath:            <#= solutionPath.Replace(solutionPath, "<solution>") #>
// projectPath:             <#= projectPath.Replace(solutionPath, "<solution>") #>
// projectName:             <#= projectName #>

<#
    bool ok = true;
    var entries = new List<AppConfigurationEntry>();
    string className = "SparkleNetworksApplicationConfigurationTree";
    string nameSpace = "Sparkle.Services.Networks";
    string xmlPathInProject = System.IO.Path.Combine("Networks", "SparkleNetworksApplicationConfigurationTree.xml");
    var xmlPath = System.IO.Path.Combine(projectPath, xmlPathInProject);
#>
    
// className:               <#= className #>
// nameSpace:               <#= nameSpace #>
// xmlPathInProject:        <#= xmlPathInProject #>

<#
    if (File.Exists(xmlPath))
    {
        this.WriteLine("// codegen: XML file found");
    }
    else
    {
        this.WriteLine("// codegen: cannot find XML file: " + xmlPath);
        ok = false;
    }

    if (ok)
    {
        try
        {
            var doc = System.Xml.Linq.XDocument.Load(xmlPath);

            foreach (var entry in doc.Root.Elements("Entry"))
            {
                var item = new AppConfigurationEntry
                {
                    //Id = key.Id,
                    Key = entry.Attribute("Name").Value,
                    //KeyId = key.KeyId,
                    IsRequired = bool.Parse(entry.Attribute("IsRequired").Value),
                    BlitableType = entry.Attribute("BlittableType").Value,
                    IsCollection = bool.Parse(entry.Attribute("IsCollection").Value),
                    IsKey = true,
                };

                var defaultValueNode = entry.Element("DefaultValue");
                if (defaultValueNode != null)
                {
                    item.DefaultRawValue = defaultValueNode.Value;
                }

                var summaryNode = entry.Element("Summary");
                if (summaryNode != null)
                {
                    item.Summary = summaryNode.Value;
                }

                var webNode = entry.Element("Web");
                if (webNode != null)
                {
                    var isVirtualDirectoryAttr = webNode.Attribute("IsVirtualDirectory");
                    if (isVirtualDirectoryAttr != null)
                    {
                        item.IsWebVirtualDirectory = bool.Parse(isVirtualDirectoryAttr.Value);
                    }
                }

                entries.Add(item);
            }

            this.WriteLine("// codegen: read " + entries.Count + " entries");
        }
        catch (Exception ex)
        {
            ok = false;
            this.WriteLine("// codegen: failed to read XML file: ");
            this.WriteLine("/*\r\n" + ex.ToString() + "\r\n*/\r\n");
        }
    }

    this.WriteLine("// codegen: Configuration keys: " + entries.Count + ".");

    if (ok)
    {
        this.WriteLine("// codegen: everything is ready. now generating code.");
    }
    else
    {
        this.WriteLine("// codegen: something is wrong. not generating code.");
    }
    
#>

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using Sparkle.Infrastructure.Data;

namespace <#=nameSpace#> {
<#
if (ok)
{
    var sb = new StringBuilder();

    try
    {
        AppConfigurationEntry.AppendTree(sb, entries, className);
    }
    catch (Exception ex)
    {
        this.WriteLine("// codegen: failed to generate code: ");
        this.WriteLine("/*\r\n" + ex.ToString() + "\r\n*/\r\n");
    }

    this.Write(sb.ToString());
}

#>
}


<#+
public class AppConfigurationEntry
{
    //public int Id { get; set; }
    public bool IsKey { get;set;}
    public int KeyId { get; set; }
    public string Key { get; set; }
    //public string RawValue { get; set; }
    //public IList<string> RawValues { get; set; }
    public bool IsRequired { get; set; }
    public string BlitableType { get; set; }
    public bool IsCollection { get; set; }
    public string Summary { get; set; }
    public string DefaultRawValue { get; set; }
    public bool IsWebVirtualDirectory { get; set; }

    public string CsharpType {
        get
        {
            switch (this.BlitableType)
            {
                case "System.String":
                    return "string";
                case "System.Int32":
                    return "int";
                case "Nullable<System.Int32>":
                    return "int?";
                case "System.Boolean":
                    return "bool";
                case "System.Guid":
                    return "Guid";
                default:
                    return this.BlitableType;
            }
        }
    }

    public bool IsValueType {
        get
        {
            switch (this.BlitableType)
            {
                case "System.Int32":
                case "System.Boolean":
                case "System.Guid":
                    return true;
                default:
                    return false;
            }
        }
    }

    public bool IsNullableValueType {
        get
        {
            switch (this.BlitableType)
            {
                case "Nullable<System.Int32>":
                case "Nullable<System.Boolean>":
                case "Nullable<System.Guid>":
                    return true;
                default:
                    return false;
            }
        }
    }

    public string NonNullableValueType {
        get
        {
            if (this.BlitableType.StartsWith("Nullable<") & this.BlitableType.EndsWith(">"))
            {
                return this.BlitableType.Substring(9, this.BlitableType.Length - 10);
            }
            else if (this.BlitableType.EndsWith("?"))
            {
                return this.BlitableType.Substring(0, this.BlitableType.Length - 1);
            }

            return null;
        }
    }

    public bool IsReferenceType {
        get { return !this.IsValueType; }
    }

    public AppConfigurationEntry Parent {get;set;}
    public List<AppConfigurationEntry> Children {get;set;}

    public static void AppendTree(StringBuilder sb, List<AppConfigurationEntry> entries, string className)
    {
        var tree = MakeTree(entries);

        sb.AppendLine("  [GeneratedCode(\"t4\", \"1.0.0.0\")]");
        sb.AppendLine("  public partial class " + className + " {");

        AppendTreeImpl(sb, tree, className, "  ", className);

        AppendCollection(sb, entries);

        sb.AppendLine("  }");
    }

    public static void AppendTreeImpl(StringBuilder sb, List<AppConfigurationEntry> entries, string parent, string indent, string className) {
        string indent0 = "  ";
        string indent1 = indent + indent0;
        string indent2 = indent1 + indent0;
        string indent3 = indent2 + indent0;
        string indent4 = indent3 + indent0;

        sb.Append(indent1);
        sb.AppendLine("private readonly IDictionary<string, AppConfigurationEntry> values;");
        sb.AppendLine("");

        sb.Append(indent1);
        sb.AppendLine("internal " + parent + "(IDictionary<string, AppConfigurationEntry> values) {");
        sb.Append(indent2);
        sb.AppendLine("this.values = values;");
        sb.Append(indent1);
        sb.AppendLine("}");
        sb.AppendLine("");

        if (entries == null) {
            sb.AppendLine("// codegen: entries list is null here");
        } else {
        foreach (var entry in entries.OrderBy(k => k.Key)) {
            string key = entry.Key.Substring(entry.Key.LastIndexOf('.') + 1);
            if (entry.IsKey) {
                sb.Append(indent1);
                sb.AppendLine("/// <summary>");
                sb.Append(indent1);
                sb.Append("/// ");
                sb.AppendLine(entry.Summary);
                sb.Append(indent1);
                sb.AppendLine("/// </summary>");
                if (entry.IsCollection) {
                    sb.Append(indent1);
                    sb.AppendLine("public IList<" + entry.CsharpType + "> " + key + " {");
                    sb.Append(indent2);
                    sb.AppendLine("get { return _" + key + " ?? (_" + key + " = " + className + ".GetValues<" + entry.CsharpType + ">(this.values, \"" + entry.Key + "\")); }");
                    //sb.Append(indent3);
                    //sb.AppendLine("return ");
                    //sb.Append("return _" + key + " ?? (_" + key + " = values[\"" + entry.Key + "\"].RawValues");
                    //sb.Append(".Where(x => x != null)");
                    //sb.Append(".Select(x => )");
                    //sb.Append(".ToList());");
                    //sb.AppendLine("");
                    //sb.Append(indent2);
                    //sb.AppendLine("}");
                    sb.Append(indent1);
                    sb.AppendLine("}");
                    sb.Append(indent1);
                    sb.AppendLine("private IList<" + entry.CsharpType + "> _" + key + ";");
                } else {
                    sb.Append(indent1);
                    sb.AppendLine("public " + entry.CsharpType + " " + key + " {");
                    sb.Append(indent2);
                    if (entry.IsNullableValueType)
                    sb.AppendLine("get { return " + className + ".GetNullableValue<" + entry.NonNullableValueType + ">(this.values, \"" + entry.Key + "\"); }");
                    else
                    sb.AppendLine("get { return " + className + ".GetValue<" + entry.CsharpType + ">(this.values, \"" + entry.Key + "\"); }");
                    sb.Append(indent1);
                    sb.AppendLine("}");
                }
            } else {
                sb.Append(indent1);
                sb.AppendLine("public " + key + "Class " + entry.Key + " {");

                sb.Append(indent2);
                sb.AppendLine("get { return _" + key + "Class ?? (_" + key + "Class = new " + key + "Class(this.values)); }");
                sb.Append(indent1);
                sb.AppendLine("}");

                sb.Append(indent1);
                sb.AppendLine("public class " + entry.Key + "Class {");

                AppendTreeImpl(sb, entry.Children, key + "Class", indent1, className);
                sb.Append(indent1);
                sb.AppendLine("}");
                sb.Append(indent1);
                sb.AppendLine("private " + key + "Class _" + key + "Class;");
            }
            sb.AppendLine();
        }
        }
    }

    public static void AppendCollection(StringBuilder sb, List<AppConfigurationEntry> entries)
    {
        sb.AppendLine("    private static readonly string[] configKeys = new string[] {");
        sb.Append("      \"");
        sb.Append(string.Join("\", \"", entries.Select(e => e.Key).ToArray()));
        sb.AppendLine("\",");
        sb.AppendLine("    };");
        sb.AppendLine("");
        sb.AppendLine("    private static readonly string[] configKeyTypes = new string[] {");
        sb.Append("      \"");
        sb.Append(string.Join("\", \"", entries.Select(e => e.BlitableType).ToArray()));
        sb.AppendLine("\",");
        sb.AppendLine("    };");
        sb.AppendLine("");
        sb.AppendLine("    private static readonly string[] configKeyValues = new string[] {");
        sb.Append("      ");
        sb.Append(string.Join("\", \"", entries.Select(e => e.DefaultRawValue != null ? "\""+e.DefaultRawValue+"\"" : "null").ToArray()));
        sb.AppendLine(",");
        sb.AppendLine("    };");
        sb.AppendLine("");

        sb.AppendLine("    public static string[] ConfigKeys {");
        sb.AppendLine("      get { return configKeys.ToArray(); }");
        sb.AppendLine("    }");
        sb.AppendLine("");
        sb.AppendLine("    public static string[] ConfigKeyTypes {");
        sb.AppendLine("      get { return configKeyTypes.ToArray(); }");
        sb.AppendLine("    }");
        sb.AppendLine("");
        sb.AppendLine("    public static string[] ConfigKeyValues {");
        sb.AppendLine("      get { return configKeyValues.ToArray(); }");
        sb.AppendLine("    }");
    }

    public static List<AppConfigurationEntry> MakeTree(List<AppConfigurationEntry> entries)
    {
        var children = new List<AppConfigurationEntry>();
        foreach (var entry in entries)
        {
            if (!entry.Key.Contains('.'))
            {
                children.Add(entry);
                continue;
            }

            var parts = entry.Key.Split('.');
            var childs = children;
            AppConfigurationEntry parent = null;
            foreach (string part in parts.Take(parts.Length - 1))
            {
                parent = childs.FirstOrDefault(e => e.Key == part);
                if (parent != null)
                {
                    if (parent.Children == null)
                        parent.Children = new List<AppConfigurationEntry>();
                    childs = parent.Children;
                }
                else
                {
                    parent = new AppConfigurationEntry
                    {
                        Key = part,
                        Children = new List<AppConfigurationEntry>(),
                    };
                    childs.Add(parent);
                    childs = parent.Children;
                }
            }

            parent.Children.Add(entry);
        }

        return children;
    }
}
#>