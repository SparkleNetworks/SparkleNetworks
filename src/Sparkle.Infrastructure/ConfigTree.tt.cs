//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// solutionPath:            <solution>
// projectPath:             <solution>\Sparkle.Infrastructure
// projectName:             Sparkle.Infrastructure

// codegen: Assembly Sparkle.Infrastructure loaded.
// codegen: Configuration keys: 81.

#if !SSC
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using Sparkle.Infrastructure.Data;

namespace Sparkle.Infrastructure {
  [GeneratedCode("t4", "1.0.0.0")]
  public partial class ConfigTree {
    private IDictionary<string, AppConfigurationEntry> values;

    internal ConfigTree(IDictionary<string, AppConfigurationEntry> values) {
      this.values = values;
    }

    public ConnectionStringsClass ConnectionStrings {
      get { return _ConnectionStringsClass ?? (_ConnectionStringsClass = new ConnectionStringsClass(this.values)); }
    }
    public class ConnectionStringsClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal ConnectionStringsClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      /// <summary>
      /// The connection string for the network membership provider.
      /// </summary>
      // default value is null
      public string NetworkApplicationServices {
        get { return ConfigTree.GetValue<string>(this.values, "ConnectionStrings.NetworkApplicationServices"); }
      }

      /// <summary>
      /// The connection string for the network database use by entity framework.
      /// </summary>
      // default value is null
      public string NetworkEntities {
        get { return ConfigTree.GetValue<string>(this.values, "ConnectionStrings.NetworkEntities"); }
      }

      /// <summary>
      /// The connection string for the partners database.
      /// </summary>
      // default value is null
      public string Partners {
        get { return ConfigTree.GetValue<string>(this.values, "ConnectionStrings.Partners"); }
      }

      /// <summary>
      /// The connection string for the partners database.
      /// </summary>
      // default value is null
      public string PartnersEntities {
        get { return ConfigTree.GetValue<string>(this.values, "ConnectionStrings.PartnersEntities"); }
      }

      /// <summary>
      /// The connection string for the SysLogger.
      /// </summary>
      // default value is null
      public string SysLogger {
        get { return ConfigTree.GetValue<string>(this.values, "ConnectionStrings.SysLogger"); }
      }

    }
    private ConnectionStringsClass _ConnectionStringsClass;

    /// <summary>
    /// The default culture for the website.
    /// </summary>
    // default value: en-US
    public string DefaultCulture {
      get { return ConfigTree.GetValue<string>(this.values, "DefaultCulture"); }
    }

    /// <summary>
    /// Disables the SysLogger.
    /// </summary>
    // default value: False
    public bool DisableSysLogger {
      get { return ConfigTree.GetValue<bool>(this.values, "DisableSysLogger"); }
    }

    public ExternalsClass Externals {
      get { return _ExternalsClass ?? (_ExternalsClass = new ExternalsClass(this.values)); }
    }
    public class ExternalsClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal ExternalsClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      public FoursquareClass Foursquare {
        get { return _FoursquareClass ?? (_FoursquareClass = new FoursquareClass(this.values)); }
      }
      public class FoursquareClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal FoursquareClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The client Id to use the Foursquare API.
        /// </summary>
        // default value is null
        public string ApiClientId {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.Foursquare.ApiClientId"); }
        }

        /// <summary>
        /// The client secret key to use the Foursquare API.
        /// </summary>
        // default value is null
        public string ApiClientSecret {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.Foursquare.ApiClientSecret"); }
        }

      }
      private FoursquareClass _FoursquareClass;

      public GoogleAnalyticsClass GoogleAnalytics {
        get { return _GoogleAnalyticsClass ?? (_GoogleAnalyticsClass = new GoogleAnalyticsClass(this.values)); }
      }
      public class GoogleAnalyticsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal GoogleAnalyticsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The Google Analytics account.
        /// </summary>
        // default value: UA-123456789-1
        public string AccountId {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.GoogleAnalytics.AccountId"); }
        }

      }
      private GoogleAnalyticsClass _GoogleAnalyticsClass;

      public LinkedInClass LinkedIn {
        get { return _LinkedInClass ?? (_LinkedInClass = new LinkedInClass(this.values)); }
      }
      public class LinkedInClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal LinkedInClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the user can login using LinkedIn.
        /// </summary>
        // default value is true
        public bool AllowLogin {
          get { return ConfigTree.GetValue<bool>(this.values, "Externals.LinkedIn.AllowLogin"); }
        }

        /// <summary>
        /// Indicates whether one can create a user account using LinkedIn.
        /// </summary>
        // default value is true
        public bool AllowLogon {
          get { return ConfigTree.GetValue<bool>(this.values, "Externals.LinkedIn.AllowLogon"); }
        }

        /// <summary>
        /// Indicates whether the user can update his profile details using LinkedIn.
        /// </summary>
        // default value is true
        public bool AllowProfileUpdate {
          get { return ConfigTree.GetValue<bool>(this.values, "Externals.LinkedIn.AllowProfileUpdate"); }
        }

      }
      private LinkedInClass _LinkedInClass;

      public MailChimpClass MailChimp {
        get { return _MailChimpClass ?? (_MailChimpClass = new MailChimpClass(this.values)); }
      }
      public class MailChimpClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal MailChimpClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// API Key for MailChimp.
        /// </summary>
        // default value is null
        public string ApiKey {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.MailChimp.ApiKey"); }
        }

        /// <summary>
        /// The list name to sync to.
        /// </summary>
        // default value is null
        public string ListName {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.MailChimp.ListName"); }
        }

      }
      private MailChimpClass _MailChimpClass;

      public MandrillClass Mandrill {
        get { return _MandrillClass ?? (_MandrillClass = new MandrillClass(this.values)); }
      }
      public class MandrillClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal MandrillClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The Mandrill configuration.
        /// </summary>
        // default value: {DnsRecords:[]}
        public string Configuration {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.Mandrill.Configuration"); }
        }

      }
      private MandrillClass _MandrillClass;

      public SparkleStatusClass SparkleStatus {
        get { return _SparkleStatusClass ?? (_SparkleStatusClass = new SparkleStatusClass(this.values)); }
      }
      public class SparkleStatusClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal SparkleStatusClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The API2 key to the SparkleStatus service.
        /// </summary>
        // default value: 
        public string Api2Key {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.SparkleStatus.Api2Key"); }
        }

        /// <summary>
        /// The API2 secret to the SparkleStatus service.
        /// </summary>
        // default value: 
        public string Api2Secret {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.SparkleStatus.Api2Secret"); }
        }

        /// <summary>
        /// The API key to the SparkleStatus service.
        /// </summary>
        // default value: 34B89420-338D-4EFE-9B64-7CA9657B41EA
        public Guid ApiKey {
          get { return ConfigTree.GetValue<Guid>(this.values, "Externals.SparkleStatus.ApiKey"); }
        }

        /// <summary>
        /// The base URL to the SparkleStatus service.
        /// </summary>
        // default value: http://localhost:1370
        public string BaseUrl {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.SparkleStatus.BaseUrl"); }
        }

      }
      private SparkleStatusClass _SparkleStatusClass;

      public TwitterClass Twitter {
        get { return _TwitterClass ?? (_TwitterClass = new TwitterClass(this.values)); }
      }
      public class TwitterClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal TwitterClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Consumer Key for Twitter account which will be used to hold the list of accounts to sync.
        /// </summary>
        // default value: xxxxxxxxxx
        public string TwitterConsumerKey {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.Twitter.TwitterConsumerKey"); }
        }

        /// <summary>
        /// Consumer Secret key for Twitter account which will be used to hold the list of accounts to sync.
        /// </summary>
        // default value: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        public string TwitterConsumerSecret {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.Twitter.TwitterConsumerSecret"); }
        }

      }
      private TwitterClass _TwitterClass;

      public UserVoiceClass UserVoice {
        get { return _UserVoiceClass ?? (_UserVoiceClass = new UserVoiceClass(this.values)); }
      }
      public class UserVoiceClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal UserVoiceClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Sets whether the UserVoice plugin should be displayed.
        /// </summary>
        // default value: true
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Externals.UserVoice.IsEnabled"); }
        }

        /// <summary>
        /// The UserVoice account id.
        /// </summary>
        // default value: 
        public string AccountId {
          get { return ConfigTree.GetValue<string>(this.values, "Externals.UserVoice.AccountId"); }
        }

      }
      private UserVoiceClass _UserVoiceClass;

    }
    private ExternalsClass _ExternalsClass;

    public FeaturesClass Features {
      get { return _FeaturesClass ?? (_FeaturesClass = new FeaturesClass(this.values)); }
    }
    public class FeaturesClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal FeaturesClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      public AdsClass Ads {
        get { return _AdsClass ?? (_AdsClass = new AdsClass(this.values)); }
      }
      public class AdsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal AdsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Defines whether the Ads module is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Ads.IsEnabled"); }
        }

        /// <summary>
        /// Indicated whether the ads require admin validation (create and edit).
        /// </summary>
        // default value: False
        public bool RequireValidation {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Ads.RequireValidation"); }
        }

      }
      private AdsClass _AdsClass;

      public CompaniesClass Companies {
        get { return _CompaniesClass ?? (_CompaniesClass = new CompaniesClass(this.values)); }
      }
      public class CompaniesClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal CompaniesClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        public AchievementsClass Achievements {
          get { return _AchievementsClass ?? (_AchievementsClass = new AchievementsClass(this.values)); }
        }
        public class AchievementsClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal AchievementsClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Indicates whether the companies achievements are enabled.
          /// </summary>
          // default value: False
          public bool IsEnabled {
            get { return ConfigTree.GetValue<bool>(this.values, "Features.Companies.Achievements.IsEnabled"); }
          }

        }
        private AchievementsClass _AchievementsClass;

        public SocialPullClass SocialPull {
          get { return _SocialPullClass ?? (_SocialPullClass = new SocialPullClass(this.values)); }
        }
        public class SocialPullClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal SocialPullClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Indicates whether to allow auto publish from social networks for companies.
          /// </summary>
          // default value: False
          public bool IsEnabled {
            get { return ConfigTree.GetValue<bool>(this.values, "Features.Companies.SocialPull.IsEnabled"); }
          }

        }
        private SocialPullClass _SocialPullClass;

      }
      private CompaniesClass _CompaniesClass;

      public EmailReplyClass EmailReply {
        get { return _EmailReplyClass ?? (_EmailReplyClass = new EmailReplyClass(this.values)); }
      }
      public class EmailReplyClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal EmailReplyClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Custom address for users to reply to.
        /// </summary>
        // default value is null
        public string InboundEmailAddress {
          get { return ConfigTree.GetValue<string>(this.values, "Features.EmailReply.InboundEmailAddress"); }
        }

      }
      private EmailReplyClass _EmailReplyClass;

      public EmailsClass Emails {
        get { return _EmailsClass ?? (_EmailsClass = new EmailsClass(this.values)); }
      }
      public class EmailsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal EmailsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        public ClassAClass ClassA {
          get { return _ClassAClass ?? (_ClassAClass = new ClassAClass(this.values)); }
        }
        public class ClassAClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal ClassAClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Sender email address for emails of kind registration, password, subscriptions...
          /// </summary>
          // default value: account@sparklenetworks.net
          public string SenderAddress {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassA.SenderAddress"); }
          }

          /// <summary>
          /// Sender name for emails of kind registration, password, subscriptions... If empty, the AppName will be used
          /// </summary>
          // default value: 
          public string SenderName {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassA.SenderName"); }
          }

        }
        private ClassAClass _ClassAClass;

        public ClassBClass ClassB {
          get { return _ClassBClass ?? (_ClassBClass = new ClassBClass(this.values)); }
        }
        public class ClassBClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal ClassBClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Sender email address for emails of kind user notifications (new comment, messages...).
          /// </summary>
          // default value: notification@sparklenetworks.net
          public string SenderAddress {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassB.SenderAddress"); }
          }

          /// <summary>
          /// Sender name for emails of kind user notifications (new comment, messages...). If empty, the AppName will be used
          /// </summary>
          // default value is null
          public string SenderName {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassB.SenderName"); }
          }

        }
        private ClassBClass _ClassBClass;

        public ClassCClass ClassC {
          get { return _ClassCClass ?? (_ClassCClass = new ClassCClass(this.values)); }
        }
        public class ClassCClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal ClassCClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Sender email address for emails of kind newsletters.
          /// </summary>
          // default value: newsletter@sparklenetworks.net
          public string SenderAddress {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassC.SenderAddress"); }
          }

          /// <summary>
          /// Sender name for emails of kind newsletters. If empty, the AppName will be used
          /// </summary>
          // default value is null
          public string SenderName {
            get { return ConfigTree.GetValue<string>(this.values, "Features.Emails.ClassC.SenderName"); }
          }

        }
        private ClassCClass _ClassCClass;

      }
      private EmailsClass _EmailsClass;

      public EventsClass Events {
        get { return _EventsClass ?? (_EventsClass = new EventsClass(this.values)); }
      }
      public class EventsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal EventsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether to display maps for event places with an address.
        /// </summary>
        // default value: True
        public bool ShowMaps {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Events.ShowMaps"); }
        }

      }
      private EventsClass _EventsClass;

      /// <summary>
      /// Indicates whether the clubs feature is enabled.
      /// </summary>
      // default value: False
      public bool EnableClubs {
        get { return ConfigTree.GetValue<bool>(this.values, "Features.EnableClubs"); }
      }

      /// <summary>
      /// Indicates whether the companies feature is enabled.
      /// </summary>
      // default value: True
      public bool EnableCompanies {
        get { return ConfigTree.GetValue<bool>(this.values, "Features.EnableCompanies"); }
      }

      public GlobalResourcesClass GlobalResources {
        get { return _GlobalResourcesClass ?? (_GlobalResourcesClass = new GlobalResourcesClass(this.values)); }
      }
      public class GlobalResourcesClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal GlobalResourcesClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Determines whether the global partner resources feature is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.GlobalResources.IsEnabled"); }
        }

      }
      private GlobalResourcesClass _GlobalResourcesClass;

      public I18NClass I18N {
        get { return _I18NClass ?? (_I18NClass = new I18NClass(this.values)); }
      }
      public class I18NClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal I18NClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Specifies the available cultures.
        /// </summary>
        // default value: fr-FR;en-US
        public string AvailableCultures {
          get { return ConfigTree.GetValue<string>(this.values, "Features.I18N.AvailableCultures"); }
        }

        /// <summary>
        /// Indicates which countries will be on top of the list while using IntlTelInput plugin.
        /// </summary>
        // default value: fr,us,gb,ca
        public string DefaultPhoneCountries {
          get { return ConfigTree.GetValue<string>(this.values, "Features.I18N.DefaultPhoneCountries"); }
        }

        /// <summary>
        /// Specifies the default timezone.
        /// </summary>
        // default value: Romance Standard Time
        public string DefaultTimezone {
          get { return ConfigTree.GetValue<string>(this.values, "Features.I18N.DefaultTimezone"); }
        }

      }
      private I18NClass _I18NClass;

      public NewsletterClass Newsletter {
        get { return _NewsletterClass ?? (_NewsletterClass = new NewsletterClass(this.values)); }
      }
      public class NewsletterClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal NewsletterClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the invited users can receive newsletter.
        /// </summary>
        // default value: Newsletter
        public string InvitedNotifications {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Newsletter.InvitedNotifications"); }
        }

        /// <summary>
        /// Indicates whether to include main timeline items into the newsletter.
        /// </summary>
        // default value: True
        public bool ShowMainTimeline {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Newsletter.ShowMainTimeline"); }
        }

      }
      private NewsletterClass _NewsletterClass;

      public PartnerResourcesClass PartnerResources {
        get { return _PartnerResourcesClass ?? (_PartnerResourcesClass = new PartnerResourcesClass(this.values)); }
      }
      public class PartnerResourcesClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal PartnerResourcesClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Determines whether the partner resources feature is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.PartnerResources.IsEnabled"); }
        }

      }
      private PartnerResourcesClass _PartnerResourcesClass;

      public PhoneNumbersClass PhoneNumbers {
        get { return _PhoneNumbersClass ?? (_PhoneNumbersClass = new PhoneNumbersClass(this.values)); }
      }
      public class PhoneNumbersClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal PhoneNumbersClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the phonenumbers feature is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.PhoneNumbers.IsEnabled"); }
        }

      }
      private PhoneNumbersClass _PhoneNumbersClass;

      public PlacesClass Places {
        get { return _PlacesClass ?? (_PlacesClass = new PlacesClass(this.values)); }
      }
      public class PlacesClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal PlacesClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Contains to API key to use Mapbox.
        /// </summary>
        // default value: 
        public string MapboxApiKey {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Places.MapboxApiKey"); }
        }

      }
      private PlacesClass _PlacesClass;

      public SparkleTVClass SparkleTV {
        get { return _SparkleTVClass ?? (_SparkleTVClass = new SparkleTVClass(this.values)); }
      }
      public class SparkleTVClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal SparkleTVClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the devices usage and management is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.SparkleTV.IsEnabled"); }
        }

      }
      private SparkleTVClass _SparkleTVClass;

      public SubscriptionsClass Subscriptions {
        get { return _SubscriptionsClass ?? (_SubscriptionsClass = new SubscriptionsClass(this.values)); }
      }
      public class SubscriptionsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal SubscriptionsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates the number of days an email should be sent before a subscription expire.
        /// </summary>
        // default value: 14;3;0
        public string EndNotificationDays {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Subscriptions.EndNotificationDays"); }
        }

        /// <summary>
        /// Sets whether the subscription system is enforced on the users.
        /// </summary>
        // default value: true
        public bool IsEnforced
        {
            get { return ConfigTree.GetValue<bool>(this.values, "Features.Subscriptions.IsEnforced"); }
        }

        /// <summary>
        /// Indicates whether to enable the subscription feature. Unscubscribed users will have limited access to the network.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Subscriptions.IsEnabled"); }
        }

        /// <summary>
        /// The configuration to use Stripe with.
        /// </summary>
        // default value: {Src:"https://checkout.stripe.com/checkout.js",Class:"stripe-button",PublicApiKey:"",SecretApiKey:""}
        public string StripeConfig {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Subscriptions.StripeConfig"); }
        }

      }
      private SubscriptionsClass _SubscriptionsClass;

      public TagsClass Tags {
        get { return _TagsClass ?? (_TagsClass = new TagsClass(this.values)); }
      }
      public class TagsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal TagsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Allows the usage of all V2 tags and fully remove V1 UIs.
        /// </summary>
        // default value: False
        public bool DisableV1 {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Tags.DisableV1"); }
        }

      }
      private TagsClass _TagsClass;

      public TeamClass Team {
        get { return _TeamClass ?? (_TeamClass = new TeamClass(this.values)); }
      }
      public class TeamClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal TeamClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the /Team page is enabled.
        /// </summary>
        // default value: True
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Team.IsEnabled"); }
        }

      }
      private TeamClass _TeamClass;

      public TimelineClass Timeline {
        get { return _TimelineClass ?? (_TimelineClass = new TimelineClass(this.values)); }
      }
      public class TimelineClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal TimelineClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        public EmailReplyClass EmailReply {
          get { return _EmailReplyClass ?? (_EmailReplyClass = new EmailReplyClass(this.values)); }
        }
        public class EmailReplyClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal EmailReplyClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Indicates if the inbound email handling is enabled.
          /// </summary>
          // default value: True
          public bool IsEnabled {
            get { return ConfigTree.GetValue<bool>(this.values, "Features.Timeline.EmailReply.IsEnabled"); }
          }

        }
        private EmailReplyClass _EmailReplyClass;

      }
      private TimelineClass _TimelineClass;

      public ToolboxClass Toolbox {
        get { return _ToolboxClass ?? (_ToolboxClass = new ToolboxClass(this.values)); }
      }
      public class ToolboxClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal ToolboxClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Determines whether the Toolbox is available.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Toolbox.IsEnabled"); }
        }

      }
      private ToolboxClass _ToolboxClass;

      public UsersClass Users {
        get { return _UsersClass ?? (_UsersClass = new UsersClass(this.values)); }
      }
      public class UsersClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal UsersClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicate the default gender to use on a system.
        /// </summary>
        // default value: Male
        public string DefaultGender {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Users.DefaultGender"); }
        }

        /// <summary>
        /// If specified, users can register freely and enter into the specified company (ID).
        /// </summary>
        // default value is null
        public int? RegisterInCompany {
          get { return ConfigTree.GetNullableValue<System.Int32>(this.values, "Features.Users.RegisterInCompany"); }
        }

        /// <summary>
        /// If RegisterInCompany is specified, indicates wheter users needs to be validated upon creation.
        /// </summary>
        // default value: True
        public bool RegisterInCompanyRequireValidation {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.Users.RegisterInCompanyRequireValidation"); }
        }

        /// <summary>
        /// Prevents users from creating an account (without the secret code).
        /// </summary>
        // default value is null
        public string RegistrationCode {
          get { return ConfigTree.GetValue<string>(this.values, "Features.Users.RegistrationCode"); }
        }

        public SocialPullClass SocialPull {
          get { return _SocialPullClass ?? (_SocialPullClass = new SocialPullClass(this.values)); }
        }
        public class SocialPullClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal SocialPullClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// Indicates whether to allow auto publish from social networks for users.
          /// </summary>
          // default value: False
          public bool IsEnabled {
            get { return ConfigTree.GetValue<bool>(this.values, "Features.Users.SocialPull.IsEnabled"); }
          }

        }
        private SocialPullClass _SocialPullClass;

      }
      private UsersClass _UsersClass;

      public WorkHereClass WorkHere {
        get { return _WorkHereClass ?? (_WorkHereClass = new WorkHereClass(this.values)); }
      }
      public class WorkHereClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal WorkHereClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// Indicates whether the workhere feature is enabled.
        /// </summary>
        // default value: False
        public bool IsEnabled {
          get { return ConfigTree.GetValue<bool>(this.values, "Features.WorkHere.IsEnabled"); }
        }

      }
      private WorkHereClass _WorkHereClass;

    }
    private FeaturesClass _FeaturesClass;

    public InfrastructureClass Infrastructure {
      get { return _InfrastructureClass ?? (_InfrastructureClass = new InfrastructureClass(this.values)); }
    }
    public class InfrastructureClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal InfrastructureClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      public WebAppClass WebApp {
        get { return _WebAppClass ?? (_WebAppClass = new WebAppClass(this.values)); }
      }
      public class WebAppClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal WebAppClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The server address that will host the main website.
        /// </summary>
        // default value: 127.0.0.1
        public string Host {
          get { return ConfigTree.GetValue<string>(this.values, "Infrastructure.WebApp.Host"); }
        }

      }
      private WebAppClass _WebAppClass;

    }
    private InfrastructureClass _InfrastructureClass;

    /// <summary>
    /// The instance name (left side of the universe name).
    /// </summary>
    // default value is null
    public string InstanceName {
      get { return ConfigTree.GetValue<string>(this.values, "InstanceName"); }
    }

    /// <summary>
    /// The network name (right side of the universe name)
    /// </summary>
    // default value is null
    public string NetworkName {
      get { return ConfigTree.GetValue<string>(this.values, "NetworkName"); }
    }

    public ProvidersClass Providers {
      get { return _ProvidersClass ?? (_ProvidersClass = new ProvidersClass(this.values)); }
    }
    public class ProvidersClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal ProvidersClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      public EmailsClass Emails {
        get { return _EmailsClass ?? (_EmailsClass = new EmailsClass(this.values)); }
      }
      public class EmailsClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal EmailsClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        /// <summary>
        /// The email provider key for emails of kind registration, password, invitation emails.
        /// </summary>
        // default value: Providers.Emails.LocalSmtp
        public string ClassA {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.ClassA"); }
        }

        /// <summary>
        /// The email provider key for emails of kind user notifications (new comment, messages...).
        /// </summary>
        // default value: Providers.Emails.LocalSmtp
        public string ClassB {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.ClassB"); }
        }

        /// <summary>
        /// The email provider key for emails of kind newsletters.
        /// </summary>
        // default value: Providers.Emails.LocalSmtp
        public string ClassC {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.ClassC"); }
        }

        /// <summary>
        /// The local SMTP server configuration.
        /// </summary>
        // default value: Sparkle.Services.Main.Providers.SmtpEmailProvider, {Host:"localhost",Port:25,Username:null,Password:null,EnableSsl:false}
        public string LocalSmtp {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.LocalSmtp"); }
        }

        /// <summary>
        /// Mandrill (via SMTP).
        /// </summary>
        // default value: Sparkle.Services.Main.Providers.SmtpEmailProvider, {Host:"localhost",Port:25,Username:null,Password:null,EnableSsl:false}
        public string MandrillApi {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.MandrillApi"); }
        }

        /// <summary>
        /// Mandrill (via SMTP).
        /// </summary>
        // default value: Sparkle.Services.Main.Providers.SmtpEmailProvider, {Host:"localhost",Port:25,Username:null,Password:null,EnableSsl:false}
        public string MandrillSmtp {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.MandrillSmtp"); }
        }

        /// <summary>
        /// An simple email logger (no sending).
        /// </summary>
        // default value: Sparkle.Services.Main.Providers.VoidEmailProvider
        public string VoidSmtp {
          get { return ConfigTree.GetValue<string>(this.values, "Providers.Emails.VoidSmtp"); }
        }

      }
      private EmailsClass _EmailsClass;

    }
    private ProvidersClass _ProvidersClass;

    public SiteClass Site {
      get { return _SiteClass ?? (_SiteClass = new SiteClass(this.values)); }
    }
    public class SiteClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal SiteClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      /// <summary>
      /// A list of domain names associated with the site.
      /// </summary>
      public IList<string> DomainNames {
        get { return _DomainNames ?? (_DomainNames = ConfigTree.GetValues<string>(this.values, "Site.DomainNames")); }
      }
      private IList<string> _DomainNames;

      /// <summary>
      /// Indicates whether the site in online
      /// </summary>
      // default value: True
      public bool Enabled {
        get { return ConfigTree.GetValue<bool>(this.values, "Site.Enabled"); }
      }

      /// <summary>
      /// Forces HTTPS for GET requests.
      /// </summary>
      // default value: False
      public bool ForceSecureHttpGet {
        get { return ConfigTree.GetValue<bool>(this.values, "Site.ForceSecureHttpGet"); }
      }

      /// <summary>
      /// Forces HTTPS for all requests.
      /// </summary>
      // default value: False
      public bool ForceSecureHttpRequests {
        get { return ConfigTree.GetValue<bool>(this.values, "Site.ForceSecureHttpRequests"); }
      }

      /// <summary>
      /// The main domain name will be used in redirections.
      /// </summary>
      // default value is null
      public string MainDomainName {
        get { return ConfigTree.GetValue<string>(this.values, "Site.MainDomainName"); }
      }

      /// <summary>
      /// Redirects all GET requests to the main domain name
      /// </summary>
      // default value: False
      public bool RedirectToMainDomain {
        get { return ConfigTree.GetValue<bool>(this.values, "Site.RedirectToMainDomain"); }
      }

      /// <summary>
      /// The theme name
      /// </summary>
      // default value: null
      public string ThemeName
      {
          get { return ConfigTree.GetValue<string>(this.values, "Site.ThemeName"); }
      }

    }
    private SiteClass _SiteClass;

    public SocialClass Social {
      get { return _SocialClass ?? (_SocialClass = new SocialClass(this.values)); }
    }
    public class SocialClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal SocialClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      public AutoPublishClass AutoPublish {
        get { return _AutoPublishClass ?? (_AutoPublishClass = new AutoPublishClass(this.values)); }
      }
      public class AutoPublishClass {
        private IDictionary<string, AppConfigurationEntry> values;

        internal AutoPublishClass(IDictionary<string, AppConfigurationEntry> values) {
          this.values = values;
        }

        public TwitterClass Twitter {
          get { return _TwitterClass ?? (_TwitterClass = new TwitterClass(this.values)); }
        }
        public class TwitterClass {
          private IDictionary<string, AppConfigurationEntry> values;

          internal TwitterClass(IDictionary<string, AppConfigurationEntry> values) {
            this.values = values;
          }

          /// <summary>
          /// The twitter consumer key.
          /// </summary>
          // default value is null
          public string OAuthToken {
            get { return ConfigTree.GetValue<string>(this.values, "Social.AutoPublish.Twitter.OAuthToken"); }
          }

          /// <summary>
          /// The twitter consumer secret.
          /// </summary>
          // default value is null
          public string OAuthVerifier {
            get { return ConfigTree.GetValue<string>(this.values, "Social.AutoPublish.Twitter.OAuthVerifier"); }
          }

          /// <summary>
          /// The username of the Twitter account containing the subscription list.
          /// </summary>
          // default value is null
          public string Username {
            get { return ConfigTree.GetValue<string>(this.values, "Social.AutoPublish.Twitter.Username"); }
          }

        }
        private TwitterClass _TwitterClass;

      }
      private AutoPublishClass _AutoPublishClass;

    }
    private SocialClass _SocialClass;

    public StorageClass Storage {
      get { return _StorageClass ?? (_StorageClass = new StorageClass(this.values)); }
    }
    public class StorageClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal StorageClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      /// <summary>
      /// The filesystem folder designated to store companies' contents.
      /// </summary>
      // default value is null
      public string CompanyContentsDirectory {
        get { return ConfigTree.GetValue<string>(this.values, "Storage.CompanyContentsDirectory"); }
      }

      /// <summary>
      /// The filesystem folder where help pages are stored.
      /// </summary>
      // default value is null
      public string HelpPagesDirectory {
        get { return ConfigTree.GetValue<string>(this.values, "Storage.HelpPagesDirectory"); }
      }

      /// <summary>
      /// Directory which contains .pot files.
      /// </summary>
      // default value: E:\dd\bb\SparkleNetworks\src\Internal\Sparkle.Web\Lang
      public string SparkleLangDirectory {
        get { return ConfigTree.GetValue<string>(this.values, "Storage.SparkleLangDirectory"); }
      }

      /// <summary>
      /// The filesystem folder designated to store users' contents.
      /// </summary>
      // default value is null
      public string UserContentsDirectory {
        get { return ConfigTree.GetValue<string>(this.values, "Storage.UserContentsDirectory"); }
      }

    }
    private StorageClass _StorageClass;

    public UserSettingsClass UserSettings {
      get { return _UserSettingsClass ?? (_UserSettingsClass = new UserSettingsClass(this.values)); }
    }
    public class UserSettingsClass {
      private IDictionary<string, AppConfigurationEntry> values;

      internal UserSettingsClass(IDictionary<string, AppConfigurationEntry> values) {
        this.values = values;
      }

      /// <summary>
      /// List of notifications to enable for all new users.
      /// </summary>
      // default value: Comment,ContactRequest,PrivateMessage,EventInvitation,Publication,Newsletter,CompanyTimelineItems,CompanyTimelineComments
      public string DefaultNotifications {
        get { return ConfigTree.GetValue<string>(this.values, "UserSettings.DefaultNotifications"); }
      }

    }
    private UserSettingsClass _UserSettingsClass;

  }
}
#endif

