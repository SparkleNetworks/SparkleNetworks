<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #><#

var services = new List<ServiceDefinition>()
{
	new ServiceDefinition("LinkedInRedirection"),
	new ServiceDefinition("User"),
	new ServiceDefinition("NetworkRequest"),
	new ServiceDefinition("Cache"),
};

var groupedServices = services
	.OrderBy(s => s.SingularName)
	.ToList();

#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sparkle.NetworksStatus.Domain
{
	using System;
	using SrkToolkit;
	using Sparkle.NetworksStatus.Domain.Services;
    using Sparkle.NetworksStatus.Domain.Internals;

	public class Disposable : IDisposable
	{
		private readonly CompositeDisposable disposable = new CompositeDisposable();
		private bool isDisposed;

		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (!this.isDisposed)
			{
				if (disposing)
				{
					this.disposable.Dispose();
				}

				this.isDisposed = true;
			}
		}

		protected T AddDisposable<T>(T disposable)
			where T : IDisposable
		{
			if (this.isDisposed)
				throw new ObjectDisposedException(this.ToString());

			return this.disposable.Add(disposable);
		}

		protected void CheckDisposed()
		{
			if (this.isDisposed)
				throw new ObjectDisposedException(this.ToString());
		}
	}

	public partial interface IServiceFactory : IDisposable
	{
<#
foreach (var service in services)
{
#>
		<#= service.InterfaceName #> <#= service.PluralName #> { get; }
<#
}
#>
	}

	public partial class ServiceFactory : Disposable, IServiceFactory
	{
		private readonly ServicesConfiguration configuration;

		////public ServiceFactory(ServicesConfiguration configuration)
		////{
		////	this.configuration = configuration;
		////	this.initialize();
		////}

		partial void initialize();

<#
foreach (var service in services)
{
#>
		public <#= service.InterfaceName #> <#= service.PluralName #>
		{
			[System.Diagnostics.DebuggerStepThrough]
			get
			{
				this.CheckDisposed();
				return this.AddDisposable<<#= service.InterfaceName #>>(new <#= service.ClassName #>(this));
			}
		}

<#
}
#>
	}

	namespace Services
	{
<#
foreach (var service in services)
{
#>

		public partial interface <#= service.InterfaceName #> : IDisposable
		{
		}

		public partial class <#= service.ClassName #> : BaseService, IDisposable, <#= service.InterfaceName #>
		{
			[System.Diagnostics.DebuggerStepThrough]
			internal <#= service.ClassName #>(IServiceFactoryEx serviceFactory)
				: base(serviceFactory)
			{
			}
		}

<#
}
#>
	}

	public partial class ServicesConfiguration
	{
	}

	public partial class BaseService : Disposable
	{
		private readonly IServiceFactoryEx serviceFactory;

		[System.Diagnostics.DebuggerStepThrough]
		protected BaseService(IServiceFactoryEx serviceFactory)
		{
			this.serviceFactory = serviceFactory;
		}

		protected IServiceFactoryEx Services
		{
			[System.Diagnostics.DebuggerStepThrough]
			get { return this.serviceFactory; }
		}
	}
}


<#+

public class ServiceCategory : IEnumerable<ServiceDefinition>
{
	public ServiceCategory()
	{
		this.Items = new List<ServiceDefinition>();
	}

	public string Name {get;set;}

	public List<ServiceDefinition> Items {get;private set;}

	public void Add(ServiceDefinition item)
	{
		this.Items.Add(item);
	}

	public IEnumerator<ServiceDefinition> GetEnumerator()
	{
		throw new NotImplementedException();
	}

	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		throw new NotImplementedException();
	}
}

public class ServiceDefinition
{
	public ServiceDefinition(string singularName)
	{
		this.SingularName = singularName;
		
		if (this.SingularName.EndsWith("y"))
			this.PluralName = this.SingularName.Substring(0, this.SingularName.Length - 1) + "ies";
		else
			this.PluralName = this.SingularName + "s";

		this.ClassName = this.PluralName + "Service";
		this.InterfaceName = "I" + this.PluralName + "Service";
	}

	public ServiceDefinition(string singularName, string pluralName)
	{
		this.SingularName = singularName;
		this.PluralName = pluralName;

		this.ClassName = this.PluralName + "Service";
		this.InterfaceName = "I" + this.PluralName + "Service";
	}

	public string SingularName {get;set;}
	public string PluralName {get;set;}
	public string ClassName {get;set;}
	public string InterfaceName {get;set;}
}



#>