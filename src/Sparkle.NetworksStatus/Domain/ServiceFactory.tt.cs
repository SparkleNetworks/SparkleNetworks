//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sparkle.NetworksStatus.Domain
{
	using System;
	using SrkToolkit;
	using Sparkle.NetworksStatus.Domain.Services;
    using Sparkle.NetworksStatus.Domain.Internals;

	public class Disposable : IDisposable
	{
		private readonly CompositeDisposable disposable = new CompositeDisposable();
		private bool isDisposed;

		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (!this.isDisposed)
			{
				if (disposing)
				{
					this.disposable.Dispose();
				}

				this.isDisposed = true;
			}
		}

		protected T AddDisposable<T>(T disposable)
			where T : IDisposable
		{
			if (this.isDisposed)
				throw new ObjectDisposedException(this.ToString());

			return this.disposable.Add(disposable);
		}

		protected void CheckDisposed()
		{
			if (this.isDisposed)
				throw new ObjectDisposedException(this.ToString());
		}
	}

	public partial interface IServiceFactory : IDisposable
	{
		ILinkedInRedirectionsService LinkedInRedirections { get; }
		IUsersService Users { get; }
		INetworkRequestsService NetworkRequests { get; }
		ICachesService Caches { get; }
	}

	public partial class ServiceFactory : Disposable, IServiceFactory
	{
		private readonly ServicesConfiguration configuration;

		////public ServiceFactory(ServicesConfiguration configuration)
		////{
		////	this.configuration = configuration;
		////	this.initialize();
		////}

		partial void initialize();

		public ILinkedInRedirectionsService LinkedInRedirections
		{
			[System.Diagnostics.DebuggerStepThrough]
			get
			{
				this.CheckDisposed();
				return this.AddDisposable<ILinkedInRedirectionsService>(new LinkedInRedirectionsService(this));
			}
		}

		public IUsersService Users
		{
			[System.Diagnostics.DebuggerStepThrough]
			get
			{
				this.CheckDisposed();
				return this.AddDisposable<IUsersService>(new UsersService(this));
			}
		}

		public INetworkRequestsService NetworkRequests
		{
			[System.Diagnostics.DebuggerStepThrough]
			get
			{
				this.CheckDisposed();
				return this.AddDisposable<INetworkRequestsService>(new NetworkRequestsService(this));
			}
		}

		public ICachesService Caches
		{
			[System.Diagnostics.DebuggerStepThrough]
			get
			{
				this.CheckDisposed();
				return this.AddDisposable<ICachesService>(new CachesService(this));
			}
		}

	}

	namespace Services
	{

		public partial interface ILinkedInRedirectionsService : IDisposable
		{
		}

		public partial class LinkedInRedirectionsService : BaseService, IDisposable, ILinkedInRedirectionsService
		{
			[System.Diagnostics.DebuggerStepThrough]
			internal LinkedInRedirectionsService(IServiceFactoryEx serviceFactory)
				: base(serviceFactory)
			{
			}
		}


		public partial interface IUsersService : IDisposable
		{
		}

		public partial class UsersService : BaseService, IDisposable, IUsersService
		{
			[System.Diagnostics.DebuggerStepThrough]
			internal UsersService(IServiceFactoryEx serviceFactory)
				: base(serviceFactory)
			{
			}
		}


		public partial interface INetworkRequestsService : IDisposable
		{
		}

		public partial class NetworkRequestsService : BaseService, IDisposable, INetworkRequestsService
		{
			[System.Diagnostics.DebuggerStepThrough]
			internal NetworkRequestsService(IServiceFactoryEx serviceFactory)
				: base(serviceFactory)
			{
			}
		}


		public partial interface ICachesService : IDisposable
		{
		}

		public partial class CachesService : BaseService, IDisposable, ICachesService
		{
			[System.Diagnostics.DebuggerStepThrough]
			internal CachesService(IServiceFactoryEx serviceFactory)
				: base(serviceFactory)
			{
			}
		}

	}

	public partial class ServicesConfiguration
	{
	}

	public partial class BaseService : Disposable
	{
		private readonly IServiceFactoryEx serviceFactory;

		[System.Diagnostics.DebuggerStepThrough]
		protected BaseService(IServiceFactoryEx serviceFactory)
		{
			this.serviceFactory = serviceFactory;
		}

		protected IServiceFactoryEx Services
		{
			[System.Diagnostics.DebuggerStepThrough]
			get { return this.serviceFactory; }
		}
	}
}


